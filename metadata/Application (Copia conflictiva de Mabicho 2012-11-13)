{
    "type": "application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "stores": [
            "mantenimiento.privado.modulosenperfil",
            "mantenimiento.privado.modulosnoenperfil",
            "mantenimiento.local.permisos.menuusuario",
            "mantenimiento.privado.modulos",
            "dumyStore"
        ],
        "name": "siadno",
        "controllers": [
            "MyController"
        ]
    },
    "id": "ExtBox1-ext-gen2514",
    "designerId": "application",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "NUEVO",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "launch",
                "fn": "launch",
                "implHandler": [
                    "siadno.enviarFormulario=this.enviarFormulario;\r",
                    "siadno.enviarCambiosGrid=this.enviarCambiosGrid;\r",
                    "siadno.rollbackCambiosGrid=this.rollbackCambiosGrid;\r",
                    "siadno.commitCambiosGrid=this.commitCambiosGrid;\r",
                    "siadno.borrarRegistroGrid=this.borrarRegistroGrid;\r",
                    "siadno.nuevoRegistroGrid=this.nuevoRegistroGrid;\r",
                    "siadno.cambiarIconoNodo=this.cambiarIconoNodo;\r",
                    "siadno.ajax=this.ajax;\r",
                    "siadno.crearMenu=this.crearMenu;\r",
                    "siadno.crearTablet=this.crearTablet;\r",
                    "siadno.limpiarFormulario=this.limpiarFormulario;\r",
                    "siadno.imprimirPostConsulta=this.imprimirPostConsulta;\r",
                    "siadno.descargarPostConsulta=this.descargarPostConsulta;\r",
                    "\r",
                    "siadno.GUARDAR_DATOS = 1;\r",
                    "siadno.BORRAR_DATOS = 2;\r",
                    "siadno.NUEVO=10;\r",
                    "siadno.IMPRIMIR=1001;\r",
                    "siadno.DESCARGAR_CSV=1002;\r",
                    "siadno.DESCARGAR_PDF=1003;\r",
                    "\r",
                    "var onSuccessOrFail = function(response, opts) {    \r",
                    "    try{                \r",
                    "        var result = Ext.decode(response.responseText);  \r",
                    "        if(result.success){                                               \r",
                    "            var interfazAutenticacion=Ext.create('siadno.view.sistema.autenticacion');\r",
                    "            interfazAutenticacion.show(); \r",
                    "            //Comentar las siguientes 3 lineas para salir del modulo depuracion\r",
                    "            var formulario=(interfazAutenticacion.query('form')[0]).getForm();\r",
                    "            formulario.setValues({login:'mabicho', password:'y2k13721551'});            \r",
                    "            interfazAutenticacion.onButtonAceptar();            \r",
                    "        }else{            \r",
                    "            Ext.MessageBox.alert('Error',result.msg);\r",
                    "        }\r",
                    "    }catch(e){        \r",
                    "        Ext.MessageBox.alert('Error',response.responseText);                        \r",
                    "    }                                          \r",
                    "};\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    method:'POST',\r",
                    "    url: 'clases/interfaces/InterfazCierreForzado.php',\r",
                    "    timeout:10000,\r",
                    "    success:onSuccessOrFail,\r",
                    "    failure:onSuccessOrFail,\r",
                    "    disableCaching:true\r",
                    "});"
                ]
            },
            "designerId": "24c6b790-186c-408c-b88c-c39cccd5d8d5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "enviarFormulario",
                "fn": "enviarFormulario",
                "designer|params": [
                    "load",
                    "formQuery",
                    "formParams",
                    "callback",
                    "callbackParams"
                ],
                "implHandler": [
                    "var formPanel=Ext.ComponentQuery.query(formQuery)[0];\r",
                    "\r",
                    "var onSuccess = function(form, action) {           \r",
                    "    try{\r",
                    "        if(!Ext.isEmpty(formPanel.el)){\r",
                    "            formPanel.el.unmask();\r",
                    "        }\r",
                    "\r",
                    "        var result = action.result;    \r",
                    "        if(!result.success){\r",
                    "            throw result.msg;\r",
                    "        }\r",
                    "\r",
                    "        if(!Ext.isEmpty(result.msg)){\r",
                    "            Ext.MessageBox.alert('Exito',result.msg);\r",
                    "        }\r",
                    "\r",
                    "        if(Ext.isFunction(callback)){\r",
                    "            callback.call(this, callbackParams, result, true);\r",
                    "        }        \r",
                    "    }catch(e){    \r",
                    "        if(Ext.isEmpty(e)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', 'Nulo');\r",
                    "            return;\r",
                    "        }\r",
                    "        if(!Ext.isEmpty(e.message)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e.message);\r",
                    "        }else{\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e);\r",
                    "        }        \r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "var onFail = function(form, action) {           \r",
                    "    try{\r",
                    "        if(!Ext.isEmpty(formPanel.el)){\r",
                    "            formPanel.el.unmask();\r",
                    "        }\r",
                    "\r",
                    "        switch (action.failureType) {\r",
                    "            case Ext.form.action.Action.CLIENT_INVALID:{        \r",
                    "                break;\r",
                    "            }\r",
                    "            case Ext.form.action.Action.CONNECT_FAILURE:{\r",
                    "                if(Ext.isFunction(callback)){\r",
                    "                    callback.call(this, callbackParams, result, false);\r",
                    "                }\r",
                    "                break;\r",
                    "            }\r",
                    "            case Ext.form.action.Action.SERVER_INVALID:{\r",
                    "                var result = action.result;    \r",
                    "                if(!result.success){\r",
                    "                    throw result.msg;\r",
                    "                }\r",
                    "\r",
                    "                if(!Ext.isEmpty(result.msg)){\r",
                    "                    Ext.MessageBox.alert('Exito',result.msg);\r",
                    "                }\r",
                    "\r",
                    "                if(Ext.isFunction(callback)){\r",
                    "                    callback.call(this, callbackParams, result, true);\r",
                    "                }\r",
                    "            }\r",
                    "        }               \r",
                    "    }catch(e){    \r",
                    "        if(Ext.isEmpty(e)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', 'Nulo');\r",
                    "            return;\r",
                    "        }\r",
                    "        if(!Ext.isEmpty(e.message)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e.message);\r",
                    "        }else{\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e);\r",
                    "        }        \r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "var params={    \r",
                    "    params: formParams,\r",
                    "    success : onSuccess,\r",
                    "    failure : onFail,\r",
                    "    scope :this\r",
                    "};\r",
                    "\r",
                    "if(load){    \r",
                    "    formPanel.getForm().load(params);    \r",
                    "}else{        \r",
                    "    formPanel.getForm().submit(params);        \r",
                    "}"
                ]
            },
            "designerId": "0c3babc3-d0a3-4988-becf-1e3e506fee5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "limpiarFormulario",
                "fn": "limpiarFormulario",
                "designer|params": [
                    "formQuery",
                    "campo",
                    "excepciones"
                ],
                "implHandler": [
                    "var campos;\r",
                    "if(Ext.isEmpty(campo))\r",
                    "campos=Ext.ComponentQuery.query(formQuery+' field');\r",
                    "else\r",
                    "campos=Ext.ComponentQuery.query(formQuery+' '+campo);\r",
                    "\r",
                    "var indice;\r",
                    "for(indice in campos){\r",
                    "    if(Ext.isArray(excepciones)){\r",
                    "        var encontrado=false;\r",
                    "        for(var i in excepciones){\r",
                    "            if(excepciones[i]==campos[indice].name){\r",
                    "                encontrado=true;\r",
                    "                break;\r",
                    "            }        \r",
                    "        }\r",
                    "\r",
                    "        if(encontrado===true){\r",
                    "            continue;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='textfield'){\r",
                    "        campos[indice].setValue('');   \r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='hiddenfield'){\r",
                    "        campos[indice].setValue('');   \r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='combobox'){\r",
                    "        campos[indice].setValue(0);   \r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='combobox'){\r",
                    "        campos[indice].setValue(0);   \r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='checkboxfield'){\r",
                    "        campos[indice].setValue(false);   \r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    if(campos[indice].xtype==='radiofield'){\r",
                    "        campos[indice].setValue(false);   \r",
                    "        continue;\r",
                    "    }   \r",
                    "\r",
                    "    if(campos[indice].xtype==='datefield'){\r",
                    "        campos[indice].initValue();   \r",
                    "        continue;\r",
                    "    } \r",
                    "}"
                ]
            },
            "designerId": "f33a92bd-70bb-4074-8440-f72752dc83aa"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "enviarCambiosGrid",
                "fn": "enviarCambiosGrid",
                "designer|params": [
                    "grid",
                    "url",
                    "idField",
                    "callback",
                    "callbackParams"
                ],
                "implHandler": [
                    "var store=grid.getStore();\r",
                    "\r",
                    "\r",
                    "var recordsToSend = [];\r",
                    "var modificados = store.getUpdatedRecords();\r",
                    "Ext.each(modificados, function(record) {\r",
                    "    recordsToSend.push(record.data);\r",
                    "});\r",
                    "\r",
                    "var nuevos = store.getNewRecords();\r",
                    "Ext.each(nuevos, function(record) {\r",
                    "    recordsToSend.push(record.data);\r",
                    "});\r",
                    "\r",
                    "if (recordsToSend.length > 0) {             \r",
                    "    //return;\r",
                    "    grid.el.mask('Guardando...', 'x-mask-loading');        \r",
                    "    recordsToSend = Ext.encode(recordsToSend);    \r",
                    "    var onSuccessOrFail=function(response, opts){           \r",
                    "        grid.el.unmask();                \r",
                    "        try{                       \r",
                    "            var result = Ext.decode(response.responseText);                        \r",
                    "            if(!result.success){                                   \r",
                    "                throw result.msg;\r",
                    "            }            \r",
                    "            var nuevos=result.data;            \r",
                    "            for(var i in nuevos){                \r",
                    "                var ind=store.findExact(idField, nuevos[i].idtemporal);                \r",
                    "                var registro=store.getAt(ind);                \r",
                    "                registro.set(idField, nuevos[i].idnuevo);                  \r",
                    "            }\r",
                    "\r",
                    "            siadno.commitCambiosGrid(grid);   \r",
                    "\r",
                    "\r",
                    "            if(!Ext.isEmpty(result.msg)){\r",
                    "                Ext.MessageBox.alert('Exito',result.msg);\r",
                    "            }\r",
                    "\r",
                    "            if(Ext.isFunction(callback)){\r",
                    "                callback.call(this, callbackParams, result);\r",
                    "            }                                           \r",
                    "        }catch(e){                             \r",
                    "            if(Ext.isEmpty(e)){\r",
                    "                Ext.MessageBox.alert('Error en recepcion', 'Nulo');\r",
                    "                return;\r",
                    "            }\r",
                    "            if(!Ext.isEmpty(e.message)){\r",
                    "                Ext.MessageBox.alert('Error en recepcion', e.message);\r",
                    "            }else{\r",
                    "                Ext.MessageBox.alert('Error en recepcion', e);\r",
                    "            } \r",
                    "        }        \r",
                    "    };\r",
                    "\r",
                    "    if(Ext.isEmpty(url)){\r",
                    "        url=store.getProxy().url;\r",
                    "    }\r",
                    "\r",
                    "    var accionEditar=siadno.GUARDAR_DATOS;\r",
                    "    if(!Ext.isEmpty(grid.accionEditar))\r",
                    "    accionEditar=grid.accionEditar;\r",
                    "\r",
                    "    Ext.Ajax.request({\r",
                    "        url : url,\r",
                    "        params : {\r",
                    "            actualizados : recordsToSend,\r",
                    "            accion: accionEditar\r",
                    "        },        \r",
                    "        scope:this,        \r",
                    "        success: onSuccessOrFail,\r",
                    "        failure: onSuccessOrFail\r",
                    "    });        \r",
                    "}"
                ]
            },
            "designerId": "2b0b75a4-ec96-4207-8ab5-d9d3085c369a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "rollbackCambiosGrid",
                "fn": "rollbackCambiosGrid",
                "designer|params": [
                    "grid"
                ],
                "implHandler": [
                    "var store=grid.getStore();\r",
                    "grid.el.mask('Deshaciendo...', 'x-mask-loading');    \r",
                    "store.each(function(r){\r",
                    "    r.reject();\r",
                    "});\r",
                    "grid.el.unmask();"
                ]
            },
            "designerId": "7363a7de-d5c6-464d-b01d-2f920599f204"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "commitCambiosGrid",
                "fn": "commitCambiosGrid",
                "designer|params": [
                    "grid"
                ],
                "implHandler": [
                    "var store=grid.getStore();\r",
                    "grid.el.mask('Commit...', 'x-mask-loading');    \r",
                    "store.each(function(r){\r",
                    "    r.commit();\r",
                    "});\r",
                    "grid.el.unmask();"
                ]
            },
            "designerId": "a0bf65ff-9ed9-476e-abce-ddcd3b32a57b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "borrarRegistroGrid",
                "fn": "borrarRegistroGrid",
                "designer|params": [
                    "grid",
                    "url",
                    "idField"
                ],
                "implHandler": [
                    "var selected = grid.getSelectionModel().getSelection();\r",
                    "if(selected.length===0){\r",
                    "    Ext.MessageBox.alert('Error','Debe seleccionar un registro a eliminar'); \r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "var doDelete=function(btn){    \r",
                    "    if(btn != 'yes'){\r",
                    "        return;\r",
                    "    }    \r",
                    "\r",
                    "    var rowToDelete=selected[0];\r",
                    "    grid.el.mask('Borrando', 'x-mask-loading');\r",
                    "\r",
                    "    var onSuccessOrFail=function(response, opts){           \r",
                    "        grid.el.unmask();                \r",
                    "        try{\r",
                    "            var result = Ext.decode(response.responseText);            \r",
                    "\r",
                    "            if(!result.success){                                   \r",
                    "                throw result.msg;\r",
                    "            }            \r",
                    "            grid.store.remove(rowToDelete);\r",
                    "            if(!Ext.isEmpty(result.msg)){                \r",
                    "                Ext.MessageBox.alert('Informacion',result.msg); \r",
                    "            }            \r",
                    "        }catch(err){     \r",
                    "            if(!Ext.isEmpty(err.message))\r",
                    "            Ext.MessageBox.alert('Error',err.message); \r",
                    "            else\r",
                    "            Ext.MessageBox.alert('Error',err); \r",
                    "        }        \r",
                    "    };\r",
                    "\r",
                    "    if (rowToDelete.phantom) {        \r",
                    "        grid.store.remove(rowToDelete);\r",
                    "        grid.el.unmask();                \r",
                    "        return;\r",
                    "    }\r",
                    "\r",
                    "    if(Ext.isEmpty(url)){\r",
                    "        url=grid.getStore().getProxy().url;\r",
                    "    } \r",
                    "\r",
                    "    var accionBorrar=this.BORRAR_DATOS;\r",
                    "    if(!Ext.isEmpty(grid.accionBorrar))\r",
                    "    accionBorrar=grid.accionBorrar;\r",
                    "\r",
                    "    Ext.Ajax.request({\r",
                    "        url : url,\r",
                    "        params : {\r",
                    "            id : rowToDelete.get(idField),\r",
                    "            accion: accionBorrar\r",
                    "        },        \r",
                    "        scope:this,        \r",
                    "        success: onSuccessOrFail,\r",
                    "        failure: onSuccessOrFail\r",
                    "    });     \r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.MessageBox.confirm(\r",
                    "'Confirmacion de borrado',\r",
                    "'Esta seguro de querer borrar este registro?',\r",
                    "doDelete,\r",
                    "this\r",
                    ");"
                ]
            },
            "designerId": "1a3a873f-eb42-465f-8e23-0f84be5934ae"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "nuevoRegistroGrid",
                "fn": "nuevoRegistroGrid",
                "designer|params": [
                    "grid",
                    "idField",
                    "fields"
                ],
                "implHandler": [
                    "var store=grid.getStore();\r",
                    "var model=new store.model();\r",
                    "var idEstablecido=false;\r",
                    "\r",
                    "if(Ext.isEmpty(idField)){        \r",
                    "    throw 'No se ha definido el campo id del nuevo registro';    \r",
                    "}\r",
                    "\r",
                    "if(!Ext.isEmpty(fields) && Ext.isObject(fields)){\r",
                    "    for(var i in fields){\r",
                    "        if(i==idField){\r",
                    "            model.setId(Ext.id());\r",
                    "            idEstablecido=true;\r",
                    "        }\r",
                    "\r",
                    "        model.set(i, fields[i]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "if(idEstablecido===false){\r",
                    "    model.setId(Ext.id());\r",
                    "    model.set(idField, store.idLocal);\r",
                    "    store.idLocal--;\r",
                    "}\r",
                    "\r",
                    "model.commit();\r",
                    "store.add(model);"
                ]
            },
            "designerId": "098dbbac-8109-496d-9828-4b00f5699088"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "cambiarIconoNodo",
                "fn": "cambiarIconoNodo",
                "designer|params": [
                    "node"
                ],
                "implHandler": [
                    "var iconCss=node.get('iconcss');\r",
                    "if(!Ext.isEmpty(iconCss)){\r",
                    "    node.set('iconCls', iconCss);\r",
                    "}"
                ]
            },
            "designerId": "805c8301-5544-426f-ae3e-bbf5a5c10904"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "ajax",
                "fn": "ajax",
                "designer|params": [
                    "url",
                    "params",
                    "callback",
                    "callbackParams"
                ],
                "implHandler": [
                    "var onSuccess = function(response, opts) {        \r",
                    "    try{        \r",
                    "        var result = Ext.decode(response.responseText);    \r",
                    "        if(!result.success){\r",
                    "            throw result.msg;\r",
                    "        }\r",
                    "\r",
                    "        if(!Ext.isEmpty(result.msg)){\r",
                    "            Ext.MessageBox.alert('Exito',result.msg);\r",
                    "        }\r",
                    "\r",
                    "        if(Ext.isFunction(callback)){\r",
                    "            callback.call(this, callbackParams, result, true);\r",
                    "        }        \r",
                    "    }catch(e){    \r",
                    "        if(Ext.isEmpty(e)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', 'Nulo');\r",
                    "            return;\r",
                    "        }\r",
                    "        if(!Ext.isEmpty(e.message)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e.message);\r",
                    "        }else{\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e);\r",
                    "        }        \r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "var onFail = function(response, opts) {        \r",
                    "    try{                \r",
                    "        if(Ext.isFunction(callback)){\r",
                    "            callback.call(this, callbackParams, response, false);\r",
                    "        }        \r",
                    "    }catch(e){    \r",
                    "        if(Ext.isEmpty(e)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', 'Nulo');\r",
                    "            return;\r",
                    "        }\r",
                    "        if(!Ext.isEmpty(e.message)){\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e.message);\r",
                    "        }else{\r",
                    "            Ext.MessageBox.alert('Error en recepcion', e);\r",
                    "        }        \r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "\r",
                    "var timeOut=30000;\r",
                    "if(!Ext.isEmpty(params) && !Ext.isEmpty(params.timeout)){\r",
                    "    timeOut=params.timeout;\r",
                    "}\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    method:'POST',\r",
                    "    url:url,    \r",
                    "    success:onSuccess,\r",
                    "    failure:onFail,\r",
                    "    disableCaching:true,\r",
                    "    scope :this,\r",
                    "    timeout:timeOut,\r",
                    "    params:params    \r",
                    "});"
                ]
            },
            "designerId": "a74d1c60-7a84-4ce0-bb1d-c4337f367297"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "crearMenu",
                "fn": "crearMenu",
                "implHandler": [
                    "var viewport=Ext.ComponentQuery.query('myviewport');\r",
                    "if(viewport.length>0){\r",
                    "    viewport[0].destroy();    \r",
                    "}\r",
                    "\r",
                    "var crearMenu=function(callbackParams, result){                \r",
                    "    Ext.define('siadno.view.MyViewport', {\r",
                    "        extend: 'Ext.container.Viewport',\r",
                    "        alias: 'widget.myviewport',                \r",
                    "        initComponent: function() {\r",
                    "            var me = this;        \r",
                    "            Ext.applyIf(me, {items: [result.toolbar]});        \r",
                    "            me.callParent(arguments);\r",
                    "        }                \r",
                    "    });\r",
                    "\r",
                    "    var viewport=Ext.create('siadno.view.MyViewport');        \r",
                    "    viewport.show();         \r",
                    "};\r",
                    "\r",
                    "siadno.ajax.call(this, 'clases/interfaces/InterfazCrearMenu.php',{}, crearMenu, {});"
                ]
            },
            "designerId": "4617fee5-beb3-47bb-8049-91ab4c54b0fa"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "crearTablet",
                "fn": "crearTablet",
                "implHandler": [
                    "var crearMenu=function(callbackParams, result){                    \r",
                    "    var viewport=Ext.create('siadno.view.viewportTablet');        \r",
                    "    viewport.show();         \r",
                    "};\r",
                    "\r",
                    "siadno.ajax.call(this, 'clases/interfaces/InterfazCrearMenu.php',{}, crearMenu, {});"
                ]
            },
            "designerId": "7489a20c-41fd-4658-ab8d-2b47dfce3add"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "imprimirPostConsulta",
                "fn": "imprimirPostConsulta",
                "designer|params": [
                    "result"
                ],
                "implHandler": [
                    "try{                        \r",
                    "    if(!result.success){\r",
                    "        throw result.msg;\r",
                    "    }\r",
                    "\r",
                    "    if(!Ext.isEmpty(result.msg)){\r",
                    "        Ext.MessageBox.alert('Exito',result.msg);\r",
                    "    }\r",
                    "\r",
                    "    if(!Ext.isDefined(result.impresora) || Ext.isEmpty(result.impresora))\r",
                    "    throw 'El informe o documento no ha definido una impresora';\r",
                    "\r",
                    "    if(!Ext.isDefined(result.impresion) || Ext.isEmpty(result.impresion))\r",
                    "    throw 'El informe o documento no ha definido una impresion';\r",
                    "\r",
                    "    var archivo='';\r",
                    "    if(Ext.isDefined(result.archivo) || !Ext.isEmpty(result.archivo))\r",
                    "    archivo=result.archivo;\r",
                    "\r",
                    "    siadno.impresoras.imprimir(result.impresora, result.impresion, true, archivo);            \r",
                    "}catch(e){    \r",
                    "    if(Ext.isEmpty(e)){\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', 'Nulo');\r",
                    "        return;\r",
                    "    }\r",
                    "    if(!Ext.isEmpty(e.message)){\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', e.message);\r",
                    "    }else{\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', e);\r",
                    "    }        \r",
                    "}"
                ]
            },
            "designerId": "d72ee0ea-b1e6-47fa-a1ab-dd223c757c58"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "descargarPostConsulta",
                "fn": "descargarPostConsulta",
                "designer|params": [
                    "result"
                ],
                "implHandler": [
                    "try{                  \r",
                    "    if(!result.success){\r",
                    "        throw result.msg;\r",
                    "    }\r",
                    "\r",
                    "    if(!Ext.isEmpty(result.msg)){\r",
                    "        Ext.MessageBox.alert('Exito',result.msg);\r",
                    "    }        \r",
                    "\r",
                    "    if(!Ext.isDefined(result.impresion) || Ext.isEmpty(result.impresion))\r",
                    "    throw 'El informe o documento no ha definido una impresion';       \r",
                    "\r",
                    "    var url='clases/interfaces/sistema/impresion/InterfazAdministracionImpresoras.php?accion='+1001+'&idImpresion='+result.impresion;    \r",
                    "    location.href=url;    \r",
                    "}catch(e){    \r",
                    "    if(Ext.isEmpty(e)){\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', 'Nulo');\r",
                    "        return;\r",
                    "    }\r",
                    "    if(!Ext.isEmpty(e.message)){\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', e.message);\r",
                    "    }else{\r",
                    "        Ext.MessageBox.alert('Error al preparar la impresion', e);\r",
                    "    }        \r",
                    "}"
                ]
            },
            "designerId": "033fe4a0-939c-4641-9ede-919a54469bbf"
        }
    ]
}