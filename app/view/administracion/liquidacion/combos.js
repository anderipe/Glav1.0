/*
 * File: app/view/administracion/liquidacion/combos.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.administracion.liquidacion.combos', {
    extend: 'Ext.window.Window',
    alias: 'widget.AdministracionLiquidacionCombos',

    height: 480,
    width: 640,
    resizable: false,
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    closable: false,
    iconCls: 'icon-basket_add',
    title: 'Combos de Servicios',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 5,
                    title: 'Combos',
                    store: 'dumyStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(Ext.isEmpty(value)){
                                    return "<font style='color:gray'>--Nuevo Combo--</font>";    
                                }

                                return value;
                            },
                            width: 228,
                            dataIndex: 'descripcion',
                            text: 'Combo',
                            flex: 5,
                            editor: {
                                xtype: 'textareafield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var columna=this.columns[colIndex];
                                var ind=columna.getEditor().getStore().findExact('idtipoautomotor', value);

                                if(value==0 || ind==-1){
                                    return "<font style='color:gray'>--N.D--</font>";    
                                }
                                var registro=columna.field.store.getAt(ind);
                                return registro.get('descripcion');
                            },
                            width: 228,
                            dataIndex: 'idtipoautomotor',
                            text: 'Tipo de Automotor',
                            flex: 4,
                            editor: {
                                xtype: 'combobox',
                                allowBlank: false,
                                displayField: 'descripcion',
                                forceSelection: true,
                                queryMode: 'local',
                                valueField: 'idtipoautomotor'
                            }
                        },
                        {
                            xtype: 'booleancolumn',
                            dataIndex: 'estado',
                            text: 'Activo?',
                            flex: 2,
                            falseText: 'In Activo',
                            trueText: 'Activo',
                            undefinedText: 'No Definido',
                            editor: {
                                xtype: 'checkboxfield',
                                name: 'estado',
                                boxLabel: 'Activo?'
                            }
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {
                        listeners: {
                            select: {
                                fn: me.onRowselectionmodelSelect,
                                scope: me
                            }
                        }
                    }),
                    plugins: [
                        Ext.create('Ext.grid.plugin.RowEditing', {

                        })
                    ]
                },
                {
                    xtype: 'gridpanel',
                    accionEditar: 103,
                    flex: 4,
                    title: 'Rubros del Combo',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'descripcion',
                            text: 'Rubro',
                            flex: 5
                        },
                        {
                            xtype: 'booleancolumn',
                            dataIndex: 'seleccionado',
                            text: 'Asignado al Combo?',
                            flex: 4,
                            falseText: 'NO',
                            trueText: 'SI',
                            undefinedText: '??',
                            editor: {
                                xtype: 'checkboxfield',
                                boxLabel: 'Asignado?'
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.RowEditing', {
                            listeners: {
                                edit: {
                                    fn: me.onGridroweditingpluginEdit,
                                    scope: me
                                }
                            }
                        })
                    ]
                }
            ],
            listeners: {
                beforeshow: {
                    fn: me.onWindowBeforeShow,
                    scope: me
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Acciones',
                            columns: 5,
                            layout: {
                                columns: 2,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    accion: 'nuevo',
                                    iconCls: 'icon-page_add',
                                    text: 'Nuevo',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickNuevo,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    accion: 'guardar',
                                    iconCls: 'icon-page_save',
                                    text: 'Guardar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickGuardar,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-page_cancel',
                                    text: 'Cancelar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickCancelar,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    aacion: 'borrar',
                                    iconCls: 'icon-page_delete',
                                    text: 'Borrar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickBorrar,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 1,
                            layout: {
                                columns: 1,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickSalir,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onRowselectionmodelSelect: function(rowmodel, record, index, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[1];
        grid.getStore().getProxy().extraParams.idcombo=record.get('idcombo');
        grid.getStore().getProxy().extraParams.accion=102;
        grid.getStore().load();
    },

    onWindowBeforeShow: function(component, eOpts) {
        var clase=Ext.ClassManager.get("siadno.store.administracion.liquidacion.combos");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.liquidacion.combos', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        autoLoad: false,
                        idLocal: -1,
                        proxy: {
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/liquidacion/InterfazCombos.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idcombo',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idcombo'
                        },
                        {
                            name: 'idtipoautomotor'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'estado',
                            type: 'boolean'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.administracion.liquidacion.tiposautomotor");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.liquidacion.tiposautomotor', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        autoLoad: false,
                        idLocal: -1,
                        proxy: {
                            extraParams:{accion:101},
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/liquidacion/InterfazCombos.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idcombo',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idtipoautomotor'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'estado',
                            type: 'boolean'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.administracion.liquidacion.rubros3");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.liquidacion.rubros3', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),                
                        autoLoad: false,
                        proxy: {
                            extraParams:{accion:102},
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/liquidacion/InterfazCombos.php',                    
                            reader: {
                                type: 'json',
                                idProperty: 'idrubro',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idrubro'
                        },
                        {
                            name: 'idcombo'
                        },
                        {
                            name: 'idtiporubro'
                        },
                        {
                            name: 'idresoluciontarifa'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'seleccionado',
                            type: 'boolean'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }


        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];
        grid.reconfigure(Ext.create('siadno.store.administracion.liquidacion.combos'));

        var columna=grid.columns[1];
        columna.getEditor().bindStore(Ext.create('siadno.store.administracion.liquidacion.tiposautomotor'));
        columna.getEditor().getStore().load(
        {        
            callback: function(records, operation, success) {
                grid.getStore().load();
                grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[1];
                grid.reconfigure(Ext.create('siadno.store.administracion.liquidacion.rubros3'));
            }
        }
        );







    },

    onGridroweditingpluginEdit: function(editor, e, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[1];         
        siadno.enviarCambiosGrid(grid, null, 'idrubro');
    },

    onButtonClickNuevo: function(button, e, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];
        siadno.nuevoRegistroGrid(grid,'idcombo');
    },

    onButtonClickGuardar: function(button, e, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];  
        var callback=function(callbackParams, result){    
            var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];      
            var records=grid.getSelectionModel().getSelection();
            if(records.length>0){        
                var record=records[records.length-1];        
                var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[1];          
                grid.getStore().getProxy().extraParams.idcombo=record.get('idcombo');        
                grid.getStore().getProxy().extraParams.accion=102;
                grid.getStore().load();
            }    
        }

        siadno.enviarCambiosGrid(grid, null, 'idcombo', callback);            
    },

    onButtonClickCancelar: function(button, e, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];
        siadno.rollbackCambiosGrid(grid);         
    },

    onButtonClickBorrar: function(button, e, eOpts) {
        var grid=Ext.ComponentQuery.query('AdministracionLiquidacionCombos grid')[0];
        siadno.borrarRegistroGrid(grid, null, 'idcombo');    
    },

    onButtonClickSalir: function(button, e, eOpts) {
        this.close();
    }

});