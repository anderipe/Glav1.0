/*
 * File: app/view/administracion/local/auditoria/integridad.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.administracion.local.auditoria.integridad', {
    extend: 'Ext.window.Window',
    alias: 'widget.AdministracionLocalAuditoriaIntegridad',

    VERIFICAR_HASH: 101,
    VERIFICAR_FIRMA: 102,
    VERIFICAR_HASHYFIRMA: 103,
    height: 480,
    width: 640,
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    closable: false,
    iconCls: 'icon-database_start',
    title: 'Integridad y Autenticidad de la Base de Datos',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 3,
                    forceFit: true,
                    store: 'dumyStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'tabla',
                            text: 'Tabla'
                        },
                        {
                            xtype: 'numbercolumn',
                            align: 'right',
                            dataIndex: 'registros',
                            text: 'Registros',
                            format: '0,000'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(value==0){
                                    return "<font style='color:red'>InCorrecta</font>";    
                                }

                                if(value==1){
                                    return "<font style='color:blue'>Correcta</font>";    
                                }

                                if(value==2){
                                    return "<font style='color:green'>Ejecutando, espere</font>";    
                                }

                                if(value==3){
                                    return "<font style='color:gray'>Tiempo Agotado</font>";    
                                }



                                return "<font style='color:gray'>No Ejecutada</font>";    
                            },
                            dataIndex: 'verificacionhash',
                            text: 'Verificación Hash'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(value==0){
                                    return "<font style='color:red'>InCorrecta</font>";    
                                }

                                if(value==1){
                                    return "<font style='color:blue'>Correcta</font>";    
                                }

                                if(value==2){
                                    return "<font style='color:green'>Ejecutando, espere</font>";    
                                }

                                if(value==3){
                                    return "<font style='color:gray'>Tiempo Agotado</font>";    
                                }



                                return "<font style='color:gray'>No Ejecutada</font>";    
                            },
                            dataIndex: 'verificacionfirma',
                            text: 'Verificación Firma'
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {
                        listeners: {
                            select: {
                                fn: me.onRowselectionmodelSelect,
                                scope: me
                            }
                        }
                    })
                },
                {
                    xtype: 'gridpanel',
                    flex: 2,
                    collapsed: false,
                    collapsible: true,
                    title: 'Errores',
                    titleCollapse: true,
                    forceFit: false,
                    store: 'dumyStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'id',
                            text: 'Registro'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 500,
                            dataIndex: 'error',
                            text: 'Error'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Acciones',
                            columns: 4,
                            layout: {
                                columns: 4,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-check_error',
                                    text: 'Verificar Hash',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickCheckHash,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-text_signature',
                                    text: 'Verificar Firma',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickCheckFirma,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 2,
                            layout: {
                                columns: 2,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                beforeshow: {
                    fn: me.onWindowBeforeShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onRowselectionmodelSelect: function(rowmodel, record, index, eOpts) {
        //var verificarHash=function(btn){    
        //    if(btn != 'yes'){
        //        return;
        //    }

        var grid=Ext.ComponentQuery.query('AdministracionLocalAuditoriaIntegridad grid')[1];
        grid.setTitle('Errores en '+record.get('tabla'));
        var store=grid.getStore();

        var callback=function(records, operation, success){      
            var reader=operation.reader;                    
            if(success){            
                record.set('verificacionhash', reader.jsonData.verificacionhash);    
                record.set('verificacionfirma', reader.jsonData.verificacionfirma);    
            }else{
                record.set('verificacionhash', 3);    
                record.set('verificacionfirma', 3);            
            }


            record.commit();
            reader.jsonData=null;        
        };

        record.set('verificacionhash', 2);   
        record.set('verificacionfirma', 2);   
        store.getProxy().extraParams={accion:this.VERIFICAR_HASHYFIRMA, indice:index, tabla:record.get('tabla')};
        store.load({
            scope: this,
            callback: callback,
            timeout: 600000,
            reader:store.getProxy().getReader()

        });
        //}

        /*    
        var ventana=Ext.MessageBox.confirm(
        'Confirmacion de Actividad',
        'Se verificara el hash y la firma de la tabla <b>'+record.get('tabla')+'</b> de manera exhaustiva, este procedimiento ocupara gran parte del poder de procesamiento del sistema ocacionando algo de lentitud en las demas areas.<br><br>Esta seguro de querer ejecutar la verificacion de de la tabla?',    
        verificarHash,
        this
        );

        this.toBack();
        ventana.toFront(true);
        */
    },

    onButtonClickCheckHash: function(button, e, eOpts) {
        var verificarHash=function(btn){    
            if(btn != 'yes'){
                return;
            }

            var grid=Ext.ComponentQuery.query('AdministracionLocalAuditoriaIntegridad grid')[0];
            var store=grid.getStore();
            var totalTablas=store.getCount();
            var registro=null;

            var callback=function(params, result, exito){            
                var registro=grid.getStore().getAt(params.indice);            

                if(exito){            
                    registro.set('verificacionhash', result.verificacionhash);    
                }else{
                    registro.set('verificacionhash', 3);    
                }
                registro.commit();
            };

            for(var i=totalTablas-1; i>=0; i--){
                registro=store.getAt(i);
                registro.set('verificacionhash', 2);    
                siadno.ajax('clases/interfaces/mantenimiento/local/auditoria/InterfazIntegridad.php', {timeout: 600000, accion:this.VERIFICAR_HASH, indice:i, tabla:registro.get('tabla')}, callback, {indice:i});    

            }
        }

        Ext.MessageBox.confirm(
        'Confirmacion de Actividad',
        'Aunque la verificacion de hash suele ser mas rapida que la verificacion de firma es una actividad que ocupara todo el poder de procesamiento del sistema ocacionando lentitud en todas las areas hasta que esta no termine en su totalidad.<br><br>Esta seguro de querer ejecutar la verificacion de hash?',    
        verificarHash,
        this
        );


    },

    onButtonClickCheckFirma: function(button, e, eOpts) {
        var verificarFirma=function(btn){    
            if(btn != 'yes'){
                return;
            }

            var grid=Ext.ComponentQuery.query('AdministracionLocalAuditoriaIntegridad grid')[0];
            var store=grid.getStore();
            var totalTablas=store.getCount();
            var registro=null;

            var callback=function(params, result, exito){            
                var registro=grid.getStore().getAt(params.indice);            

                if(exito){            
                    registro.set('verificacionfirma', result.verificacionfirma);    
                }else{
                    registro.set('verificacionfirma', 3);    
                }
                registro.commit();
            };

            for(var i=totalTablas-1; i>=0; i--){
                registro=store.getAt(i);
                registro.set('verificacionfirma', 2);    
                siadno.ajax('clases/interfaces/mantenimiento/local/auditoria/InterfazIntegridad.php', {timeout: 600000, accion:this.VERIFICAR_FIRMA, indice:i, tabla:registro.get('tabla')}, callback, {indice:i});    

            }
        }

        Ext.MessageBox.confirm(
        'Confirmacion de Actividad',
        'La verificacion de firma ocupara todo el poder de procesamiento del sistema ocacionando lentitud en todas las areas hasta que esta no termine en su totalidad.<br><br>Esta seguro de querer ejecutar la verificacion de firma?',    
        verificarFirma,
        this
        );


    },

    onButtonClick1: function(button, e, eOpts) {
        this.close();
    },

    onWindowBeforeShow: function(component, eOpts) {
        var clase=Ext.ClassManager.get("siadno.store.administracion.local.auditoria.integridad");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.local.auditoria.integridad', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        idLocal: -1,
                        proxy: {
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/auditoria/InterfazIntegridad.php',
                            reader: {
                                type: 'json',
                                idProperty: 'tabla',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'tabla'
                        },
                        {
                            name: 'registros'
                        },
                        {
                            name: 'verificacionhash'                    
                        },
                        {
                            name: 'verificacionfirma'                    
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.administracion.local.auditoria.integridaddetalles");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.local.auditoria.integridaddetalles', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        idLocal: -1,
                        proxy: {
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/auditoria/InterfazIntegridad.php',
                            metachange:function(sourse, meta, eOpts){
                                alert('metachange');
                            },
                            onMetaChange:function(sourse, meta, eOpts){
                                alert('onMetaChange');
                            },
                            onMetachange:function(sourse, meta, eOpts){
                                alert('onMetachange');
                            },
                            reader: {
                                type: 'json',
                                idProperty: 'id',                        
                                messageProperty: 'msg',
                                root: 'data'                        
                            }
                        },
                        fields: [
                        {
                            name: 'id'
                        },
                        {
                            name: 'error'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }


        var grids=Ext.ComponentQuery.query('AdministracionLocalAuditoriaIntegridad grid');

        var grid=grids[0];
        grid.reconfigure(Ext.create('siadno.store.administracion.local.auditoria.integridad'));
        grid.getStore().load();

        grid=grids[1];
        grid.reconfigure(Ext.create('siadno.store.administracion.local.auditoria.integridaddetalles'));
        //grid.getStore().load();

        //var grid=grids[1];
        //grid.collapse();
        //grid.expand();
        //grid.reconfigure(Ext.create('siadno.store.administracion.local.auditoria.integridad'));
        //grid.getStore().load();
    }

});