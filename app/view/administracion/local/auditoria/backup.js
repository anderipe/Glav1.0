/*
 * File: app/view/administracion/local/auditoria/backup.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.administracion.local.auditoria.backup', {
    extend: 'Ext.window.Window',
    alias: 'widget.AdministracionLocalAuditoriaBackup',

    VERIFICAR_HASH: 101,
    height: 280,
    width: 320,
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    closable: false,
    iconCls: 'icon-database_save',
    title: 'Copias de Respaldo',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 3,
                    forceFit: true,
                    store: 'dumyStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'nombrearchivo',
                            text: 'BackUp'
                        }
                    ],
                    selModel: Ext.create('Ext.selection.RowModel', {

                    })
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Acciones',
                            columns: 4,
                            layout: {
                                columns: 4,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-page_save',
                                    text: 'Crear',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickCheckHash,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-page_delete',
                                    text: 'Borrar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-package_down',
                                    text: 'Descargar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick2,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 2,
                            layout: {
                                columns: 2,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                beforeshow: {
                    fn: me.onWindowBeforeShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onButtonClickCheckHash: function(button, e, eOpts) {
        this.grid.getStore().getProxy().extraParams.accion=102;
        this.grid.getStore().load();
    },

    onButtonClick: function(button, e, eOpts) {
        if(this.grid.getSelectionModel().hasSelection()){

            var registros=this.grid.getSelectionModel().getSelection();
            this.grid.getStore().getProxy().extraParams.accion=103;
            this.grid.getStore().getProxy().extraParams.rutacompleta=registros[0].get("rutacompleta");    
            this.grid.getStore().load();
        }
    },

    onButtonClick2: function(button, e, eOpts) {
        if(this.grid.getSelectionModel().hasSelection()){

            var registros=this.grid.getSelectionModel().getSelection();
            var nombreArchivo=registros[0].get("nombrearchivo");    
            location.href="backups/"+nombrearchivo;    
        }
    },

    onButtonClick1: function(button, e, eOpts) {
        this.close();
    },

    onWindowBeforeShow: function(component, eOpts) {

        var clase=Ext.ClassManager.get("siadno.store.administracion.local.auditoria.backup");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.administracion.local.auditoria.backup', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        idLocal: -1,
                        proxy: {
                            extraParams:{accion:101},
                            type: 'ajax',
                            url: 'clases/interfaces/mantenimiento/local/auditoria/InterfazBackUp.php',
                            reader: {
                                type: 'json',
                                idProperty: 'nombrearchivo',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'rutacompleta'
                        },
                        {
                            name: 'nombrearchivo'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }



        this.grid=Ext.ComponentQuery.query('AdministracionLocalAuditoriaBackup grid')[0];
        this.grid.reconfigure(Ext.create('siadno.store.administracion.local.auditoria.backup'));
        this.grid.getStore().load();
    }

});