/*
 * File: app/view/servicios/otros/resumenanual.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.servicios.otros.resumenanual', {
    extend: 'Ext.window.Window',
    alias: 'widget.ServiciosOtrosResumenanual',

    height: 600,
    width: 1024,
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    iconCls: 'icon-layout',
    title: 'Resumen Anual',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    flex: 1,
                    margins: '3 3 3 3',
                    height: 65,
                    maxHeight: 65,
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    bodyPadding: 10,
                    url: 'clases/interfaces/InterfazRegistroServicios.php',
                    items: [
                        {
                            xtype: 'datefield',
                            flex: 10,
                            margins: '0 3 0 0',
                            fieldLabel: 'Mes Inicial',
                            labelAlign: 'top',
                            name: 'fechainicial',
                            format: 'Y/m/d',
                            submitFormat: 'Y-m-d',
                            listeners: {
                                change: {
                                    fn: me.onDatefieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'datefield',
                            flex: 10,
                            margins: '0 3 0 0',
                            fieldLabel: 'Mes Final',
                            labelAlign: 'top',
                            name: 'fechafinal',
                            format: 'Y/m/d',
                            submitFormat: 'Y-m-d',
                            listeners: {
                                change: {
                                    fn: me.onDatefieldChange1,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    margins: '3 3 3 3',
                    columns: [
                        {
                            xtype: 'datecolumn',
                            text: 'MyDateColumn1',
                            format: 'Y/m/d'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return '<div><b>'+value+'</b></div>';
                            },
                            summaryRenderer: function(val, params, data) {
                                return '0.0';
                            },
                            summaryType: 'sum',
                            width: 150,
                            align: 'right',
                            dataIndex: 'd0'
                        }
                    ],
                    features: [
                        {
                            ftype: 'summary'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Impresi√≥n',
                            columns: 3,
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-pdf',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick111,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-excel',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick211,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 1,
                            layout: {
                                columns: 1,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickSalir1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                show: {
                    fn: me.onPanelShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onDatefieldChange: function(field, newValue, oldValue, eOpts) {
        this.traerResumen();
    },

    onDatefieldChange1: function(field, newValue, oldValue, eOpts) {
        this.traerResumen();
    },

    onButtonClick111: function(button, e, eOpts) {
        var grid=this.grid

        var callback=function(records, operation, succes){
            try{                    
                var result = Ext.decode(operation.response.responseText);        
                siadno.descargarPostConsulta(result);
            }catch(e){            
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error codificar la respuesta', e.message);
                }else{
                    Ext.MessageBox.alert('Error codificar la respuesta', e);
                }        
            }
        }

        grid.getStore().getProxy().extraParams.pdf=1;
        grid.getStore().load({scope:this, callback:callback});
        grid.getStore().getProxy().extraParams.pdf=0;
    },

    onButtonClick211: function(button, e, eOpts) {
        var grid=this.grid

        var callback=function(records, operation, succes){
            try{                    
                var result = Ext.decode(operation.response.responseText);        
                siadno.descargarPostConsulta(result);
            }catch(e){            
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error codificar la respuesta', e.message);
                }else{
                    Ext.MessageBox.alert('Error codificar la respuesta', e);
                }        
            }
        }

        grid.getStore().getProxy().extraParams.excel=1;
        grid.getStore().load({scope:this, callback:callback});
        grid.getStore().getProxy().extraParams.excel=0;
    },

    onButtonClickSalir1: function(button, e, eOpts) {
        this.close();
    },

    onPanelShow: function(component, eOpts) {
        this.miRender=function(value, metaData, record, rowIndex, colIndex, store, view) {
            var  valor=Ext.util.Format.number(value, '0,000');

            return "<div>$"+valor+"</div>";            
        };

        this.miRenderNeto=function(value, metaData, record, rowIndex, colIndex, store, view) {
            var  valor=Ext.util.Format.number(value, '0,000');

            return "<div><b>$"+valor+"</b></div>";            
        };

        this.sumRender=function(val, params, data) {
            var  valor=Ext.util.Format.number(val, '0,000');

            return "<div><b>$"+valor+"</b></div>";       
        };

        this.sumRenderNeto=function(val, params, data) {
            var  valor=Ext.util.Format.number(val, '0,000');

            return "<div style='color:blue;'><b>$"+valor+"</b></div>";       
        };

        var clase=Ext.ClassManager.get("siadno.store.servicios2.listagastos");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.servicios2.listagastos', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:101},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazServiciosResumenAnual.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idtipogasto',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idtipogasto'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'gasto'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        this.configStoreGastos={      
            autoLoad: false,
            proxy: {
                type: 'ajax',
                extraParams: {
                    accion: 102
                },
                url: 'clases/interfaces/InterfazServiciosResumenAnual.php',
                reader: {
                    type: 'json',
                    idProperty: 'fecha',
                    messageProperty: 'msg',
                    root: 'data'
                }
            },
            fields: [
            {
                name: 'fecha'
            }
            ]
        };


        this.storeResumen=null;
        this.grid=Ext.ComponentQuery.query('ServiciosOtrosResumenanual grid')[0];
        this.fechaInicial=Ext.ComponentQuery.query('ServiciosOtrosResumenanual datefield[name=fechainicial]')[0];
        this.fechaInicial.suspendEvents(false);
        this.fechaFinal=Ext.ComponentQuery.query('ServiciosOtrosResumenanual datefield[name=fechafinal]')[0];
        this.fechaFinal.suspendEvents(false);

        var dt = new Date();
        this.fechaInicial.setValue(dt);
        this.fechaInicial.resumeEvents();

        this.fechaFinal.setValue(dt);
        this.fechaFinal.resumeEvents();


        //alert(this.grid.columns);
        this.storeGastos=Ext.create('siadno.store.servicios2.listagastos');
        this.storeGastos.load({
            scope: this,
            callback: function(records, operation, success) {
                var numGastos=this.storeGastos.count();                               

                this.configStoreGastos.fields=[];
                this.configStoreGastos.fields[0]={name: 'fecha'};        

                var columns=[
                {
                    xtype: 'gridcolumn',
                    maxWidth: 80,
                    minWidth: 80,
                    width: 80,
                    dataIndex: 'fecha',
                    text: 'Fecha'
                }
                ];


                var indice=0;
                for(var i in records){                
                    var nombreCampo='id_gasto_'+records[i].get('idtipogasto');        
                    indice=parseInt(i, 10)+1;
                    this.configStoreGastos.fields[indice]={name: nombreCampo};
                    columns[indice]={
                        xtype: 'gridcolumn',
                        dataIndex: nombreCampo,
                        flex: 1,
                        align: 'right',
                        text: records[i].get('descripcion'),
                        renderer: this.miRender,
                        type: 'float',
                        summaryType: 'sum',
                        summaryRenderer: this.sumRender
                    };
                } 
                indice++;
                this.configStoreGastos.fields[indice]={name: 'total'};
                columns[indice]={
                    xtype: 'gridcolumn',
                    dataIndex: 'total',
                    flex: 1,
                    align: 'right',
                    text: 'NETO',
                    renderer: this.miRenderNeto,
                    type: 'float',
                    summaryType: 'sum',
                    summaryRenderer: this.sumRenderNeto
                };

                var anteriorStore=this.storeResumen;        
                this.storeResumen=Ext.create('Ext.data.Store', this.configStoreGastos);          
                this.grid.reconfigure(this.storeResumen, columns);


                if(!Ext.isEmpty(anteriorStore)){        
                    Ext.destroy(anteriorStore);
                }




                //this.traerResumen();
            }
        });

    },

    traerResumen: function() {
        this.grid.getStore().getProxy().extraParams.fechainicial=this.fechaInicial.getSubmitData().fechainicial;
        this.grid.getStore().getProxy().extraParams.fechafinal=this.fechaFinal.getSubmitData().fechafinal;
        this.grid.getStore().load();
    }

});