/*
 * File: app/view/mantenimiento/privado/modulos.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.mantenimiento.privado.modulos', {
    extend: 'Ext.window.Window',
    alias: 'widget.MantenimientoPrivadoModulos',

    height: 600,
    width: 640,
    layout: {
        type: 'border'
    },
    closable: false,
    iconCls: 'icon-bricks',
    title: 'Módulos',
    maximizable: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'treepanel',
                    region: 'center',
                    autoRender: true,
                    enableColumnHide: false,
                    enableColumnMove: false,
                    enableColumnResize: false,
                    store: 'mantenimiento.privado.modulos',
                    rootVisible: false,
                    useArrows: true,
                    viewConfig: {
                        rootVisible: false,
                        plugins: [
                            Ext.create('Ext.tree.plugin.TreeViewDragDrop', {

                            })
                        ]
                    },
                    selModel: Ext.create('Ext.selection.CellModel', {

                    }),
                    columns: [
                        {
                            xtype: 'treecolumn',
                            draggable: false,
                            width: 100,
                            sortable: false,
                            dataIndex: 'nombre',
                            hideable: false,
                            text: 'Módulo',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            draggable: false,
                            width: 300,
                            sortable: false,
                            dataIndex: 'clase',
                            hideable: false,
                            text: 'Clase'
                        }
                    ],
                    listeners: {
                        itemappend: {
                            fn: me.onTreepanelItemAppend,
                            scope: me
                        },
                        select: {
                            fn: me.onTreepanelSelect,
                            scope: me
                        },
                        itemmove: {
                            fn: me.onTreepanelItemMove,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'form',
                    region: 'south',
                    height: 98,
                    bodyPadding: 10,
                    url: 'clases/interfaces/mantenimiento/privado/InterfazModulos.php',
                    items: [
                        {
                            xtype: 'hiddenfield',
                            anchor: '100%',
                            height: 0,
                            margin: 0,
                            padding: 0,
                            fieldLabel: 'Label',
                            labelPad: 0,
                            name: 'idmodulo'
                        },
                        {
                            xtype: 'hiddenfield',
                            anchor: '100%',
                            height: 0,
                            margin: 0,
                            padding: 0,
                            fieldLabel: 'Label',
                            labelPad: 0,
                            name: 'idmodulopadre'
                        },
                        {
                            xtype: 'hiddenfield',
                            anchor: '100%',
                            height: 0,
                            margin: 0,
                            padding: 0,
                            fieldLabel: 'Label',
                            labelPad: 0,
                            name: 'orden'
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            fieldLabel: 'Nombre',
                            name: 'nombre'
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            fieldLabel: 'Clase',
                            name: 'clase',
                            editable: false,
                            displayField: 'nombre',
                            store: 'dumyStore',
                            valueField: 'clase'
                        },
                        {
                            xtype: 'container',
                            height: 24,
                            layout: {
                                type: 'column'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 301,
                                    fieldLabel: 'Icono CSS',
                                    name: 'iconcss',
                                    editable: false,
                                    displayField: 'nombre',
                                    store: 'dumyStore',
                                    valueField: 'iconcss',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    accion: 'mostrar',
                                    height: 22,
                                    width: 22,
                                    iconCls: 'icon-accept'
                                }
                            ]
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    region: 'center',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Acciones',
                            columns: 5,
                            layout: {
                                columns: 2,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    accion: 'nuevo',
                                    iconCls: 'icon-page_add',
                                    text: 'Nuevo',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickNuevo,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    accion: 'guardar',
                                    iconCls: 'icon-page_save',
                                    text: 'Guardar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickGuardar,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    aacion: 'borrar',
                                    iconCls: 'icon-page_delete',
                                    text: 'Borrar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickBorrar,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 1,
                            layout: {
                                columns: 1,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickSalir,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                beforeshow: {
                    fn: me.onWindowBeforeShow,
                    scope: me
                },
                destroy: {
                    fn: me.onWindowDestroy,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onTreepanelItemAppend: function(nodeinterface, node, index, eOpts) {
        siadno.cambiarIconoNodo(node);
    },

    onTreepanelSelect: function(rowmodel, record, index, eOpts) {
        var formPanel=Ext.ComponentQuery.query('MantenimientoPrivadoModulos form')[0];
        formPanel.getForm().loadRecord(record);
    },

    onTreepanelItemMove: function(nodeinterface, oldParent, newParent, index, eOpts) {
        nodeinterface.set('orden', index+1);
        nodeinterface.set('idmodulopadre', newParent.get('idmodulo'));
        var formPanel=Ext.ComponentQuery.query('MantenimientoPrivadoModulos form')[0];
        formPanel.getForm().loadRecord(nodeinterface);
        var tree=Ext.ComponentQuery.query('MantenimientoPrivadoModulos treepanel')[0];
        tree.getSelectionModel().select(nodeinterface);
        this.onButtonClickGuardar();
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var boton=Ext.ComponentQuery.query('MantenimientoPrivadoModulos button[accion=mostrar]')[0];
        boton.setIconCls(newValue);

        //alert(newValue);

        //boton.iconCls=newValue;
    },

    onButtonClickNuevo: function(button, e, eOpts) {
        var tree=Ext.ComponentQuery.query('MantenimientoPrivadoModulos treepanel')[0];

        if (!tree.getSelectionModel().hasSelection()){
            Ext.MessageBox.alert('Mensaje', 'Seleccione el modulo al que desea agregar el nuevo sub-modulo!');
            return;
        }

        var agregarNodo=function(params, result){
            var selectedNode=params.selectedNode;    
            selectedNode.set('leaf', false); 
            selectedNode.appendChild({
                leaf: true,
                iconcss: result.data.iconcss,
                nombre: result.data.nombre,
                clase: result.data.clase,
                orden: result.data.orden,
                idmodulo: result.data.idmodulo,
                idmodulopadre: result.data.idmodulopadre                
            });    
            tree.getView().refresh();
            selectedNode.expand();    
            selectedNode.set('clase', '');
            selectedNode.commit();
        };

        var selectedNode = tree.getSelectionModel().getSelection()[0];    
        siadno.enviarFormulario.call(this, false, 'MantenimientoPrivadoModulos form', {accion:siadno.NUEVO}, agregarNodo, {selectedNode:selectedNode});
    },

    onButtonClickGuardar: function(button, e, eOpts) {
        var tree=Ext.ComponentQuery.query('MantenimientoPrivadoModulos treepanel')[0];

        if (!tree.getSelectionModel().hasSelection()){
            Ext.MessageBox.alert('Mensaje', 'Seleccione el modulo que desea modificar y haga cambios sobre el!');
            return;
        }

        var modificarNodo=function(params, result){
            var selectedNode=params.selectedNode;        
            selectedNode.set(result.data);     
            selectedNode.set('iconCls', result.data.iconcss);
            tree.getView().refresh();        
            selectedNode.commit();
        };

        var selectedNode = tree.getSelectionModel().getSelection()[0];    
        siadno.enviarFormulario.call(this, false, 'MantenimientoPrivadoModulos form', {accion:siadno.GUARDAR_DATOS}, modificarNodo, {selectedNode:selectedNode});
    },

    onButtonClickBorrar: function(button, e, eOpts) {
        var tree=Ext.ComponentQuery.query('MantenimientoPrivadoModulos treepanel')[0];

        if (!tree.getSelectionModel().hasSelection()){
            Ext.MessageBox.alert('Mensaje', 'Seleccione el modulo o sub-modulo que desea borrar!');
            return;
        }

        var borrarNodo=function(params, result){
            var selectedNode=params.selectedNode;    
            var parentNode = selectedNode.parentNode;
            selectedNode.remove(false);
            selectedNode.destroy();
            if (!parentNode.hasChildNodes()){
                parentNode.set('leaf', true);
            }      
        };

        var selectedNode = tree.getSelectionModel().getSelection()[0];    
        if(selectedNode.hasChildNodes()){
            Ext.MessageBox.alert('Mensaje', 'Debe borrar primero todos los sub-modulos de este modulo!');
            return;
        }
        siadno.enviarFormulario.call(this, false, 'MantenimientoPrivadoModulos form', {accion:siadno.BORRAR_DATOS}, borrarNodo, {selectedNode:selectedNode});
    },

    onButtonClickSalir: function(button, e, eOpts) {
        this.close();
    },

    onWindowBeforeShow: function(component, eOpts) {
        var clase=Ext.ClassManager.get("siadno.store.mantenimiento.privado.clases");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.mantenimiento.privado.clases', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/vistasWeb.php',
                            reader: {
                                type: 'json',
                                idProperty: 'iconcss',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'clase'
                        },
                        {
                            name: 'nombre'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.mantenimiento.privado.iconcss");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.mantenimiento.privado.iconcss', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/iconcss.php',
                            reader: {
                                type: 'json',
                                idProperty: 'iconcss',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'iconcss'
                        },
                        {
                            name: 'nombre'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        var comboIconCss=Ext.ComponentQuery.query('MantenimientoPrivadoModulos combobox[name=iconcss]')[0];
        comboIconCss.bindStore(Ext.create('siadno.store.mantenimiento.privado.iconcss'));
        var listConfig={
            loadingText: 'Buscando...',
            emptyText: 'No se encontraron iconos.',               
            getInnerTpl: function() {
                return '<table border=0><tr><td class={iconcss} style=\'width:16px;height:16px;\'></td><td>{nombre}</td></tr></table>';                    
            }
        };
        comboIconCss.listConfig=listConfig;
        comboIconCss.getStore().load();

        var comboClase=Ext.ComponentQuery.query('MantenimientoPrivadoModulos combobox[name=clase]')[0];
        comboClase.bindStore(Ext.create('siadno.store.mantenimiento.privado.clases'));
        comboClase.getStore().load();

        var tree=Ext.ComponentQuery.query('MantenimientoPrivadoModulos treepanel')[0];
        var nodoRaiz=tree.getRootNode();
        nodoRaiz.removeAll();
        tree.getStore().load({
            scope: this,
            callback: function(records, operation, success) {        
                if(records.length){
                    records[0].expand(false);        
                }        
            }
        }); 

    },

    onWindowDestroy: function(component, eOpts) {
        siadno.crearMenu();
    }

});