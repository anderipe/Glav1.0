/*
 * File: app/view/mantenimiento/local/permisos/usuarios.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.mantenimiento.local.permisos.usuarios', {
    extend: 'Ext.window.Window',
    alias: 'widget.MantenimientoLocalPermisosUsuarios',

    idPerfil: '0',
    cargado: '0',
    AGREGAR_PERFIL: '101',
    QUITAR_PERFIL: '102',
    CAMBIAR_PASSWORD: '103',
    cambiandoIdentificacion: '0',
    height: 600,
    width: 800,
    resizable: false,
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    closable: false,
    iconCls: 'icon-group',
    title: 'Usuarios',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    height: 250,
                    maxHeight: 250,
                    minHeight: 250,
                    layout: {
                        type: 'fit'
                    },
                    bodyPadding: 10,
                    url: 'clases/interfaces/mantenimiento/local/permisos/InterfazUsuarios.php',
                    items: [
                        {
                            xtype: 'fieldset',
                            height: 245,
                            padding: '0 10 0 10',
                            layout: {
                                align: 'stretch',
                                type: 'hbox'
                            },
                            title: 'Datos Personales',
                            items: [
                                {
                                    xtype: 'hiddenfield',
                                    fieldLabel: 'Label',
                                    name: 'idpersona'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    fieldLabel: 'Label',
                                    name: 'idusuario'
                                },
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    margins: '',
                                    margin: 2,
                                    layout: {
                                        type: 'anchor'
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            height: 27,
                                            margin: 0,
                                            padding: 0,
                                            layout: {
                                                align: 'stretch',
                                                type: 'hbox'
                                            },
                                            fieldLabel: 'Identificación',
                                            items: [
                                                {
                                                    xtype: 'combobox',
                                                    flex: 1,
                                                    margins: '0',
                                                    margin: '0 1 0 0',
                                                    padding: 0,
                                                    labelPad: 0,
                                                    name: 'idtipoidentificacion',
                                                    value: 0,
                                                    editable: false,
                                                    displayField: 'abreviatura',
                                                    store: 'dumyStore',
                                                    valueField: 'idtipoidentificacion',
                                                    listeners: {
                                                        select: {
                                                            fn: me.onComboboxSelect1,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'combobox',
                                                    flex: 3,
                                                    margins: '0',
                                                    margin: '0 1 0 0',
                                                    padding: 0,
                                                    labelPad: 0,
                                                    name: 'identificacion',
                                                    enableKeyEvents: true,
                                                    hideTrigger: true,
                                                    autoSelect: false,
                                                    displayField: 'identificacion',
                                                    minChars: 5,
                                                    queryParam: 'identificacion',
                                                    store: 'dumyStore',
                                                    valueField: 'identificacion',
                                                    listeners: {
                                                        keyup: {
                                                            fn: me.onComboboxKeyup,
                                                            scope: me
                                                        },
                                                        blur: {
                                                            fn: me.onComboboxBlur,
                                                            scope: me
                                                        },
                                                        select: {
                                                            fn: me.onComboboxSelect,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            anchor: '100%',
                                            fieldLabel: 'Usuario Activo',
                                            name: 'estado',
                                            boxLabel: 'Señalar para activar',
                                            inputValue: '1',
                                            uncheckedValue: '0'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Nombres',
                                            name: 'nombres'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Apellidos',
                                            name: 'apellidos'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Usuario',
                                            name: 'login'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Contraseña',
                                            name: 'password',
                                            inputType: 'password'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    margin: 2,
                                    layout: {
                                        type: 'anchor'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            anchor: '100%',
                                            fieldLabel: 'Nacionalidad',
                                            name: 'idpais',
                                            value: 0,
                                            editable: false,
                                            displayField: 'nacionalidad',
                                            forceSelection: true,
                                            store: 'dumyStore',
                                            valueField: 'idpais'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Dirección',
                                            name: 'direccion'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Teléfonos',
                                            name: 'telefonos'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'E-Mail',
                                            name: 'email'
                                        },
                                        {
                                            xtype: 'datefield',
                                            anchor: '100%',
                                            autoShow: true,
                                            fieldLabel: 'Nacimiento',
                                            name: 'fechanacimiento',
                                            format: 'd/m/Y',
                                            submitFormat: 'Y-m-d'
                                        },
                                        {
                                            xtype: 'radiogroup',
                                            fieldLabel: 'Sexo',
                                            items: [
                                                {
                                                    xtype: 'radiofield',
                                                    name: 'sexo',
                                                    boxLabel: 'Masculino',
                                                    checked: true,
                                                    inputValue: '1'
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    name: 'sexo',
                                                    boxLabel: 'Femenino',
                                                    inputValue: '2'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'gridpanel',
                            flex: 1,
                            id: 'noAsignados',
                            title: 'Perfiles NO Asignados',
                            store: 'dumyStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 221,
                                    dataIndex: 'nombre',
                                    text: 'Perfil'
                                }
                            ],
                            viewConfig: {
                                plugins: [
                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                    })
                                ],
                                listeners: {
                                    beforedrop: {
                                        fn: me.onGriddragdroppluginBeforeDrop1,
                                        scope: me
                                    }
                                }
                            },
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        },
                        {
                            xtype: 'gridpanel',
                            flex: 1,
                            id: 'asignados',
                            title: 'Perfiles Asignados',
                            store: 'dumyStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 221,
                                    dataIndex: 'nombre',
                                    text: 'Perfil'
                                }
                            ],
                            viewConfig: {
                                plugins: [
                                    Ext.create('Ext.grid.plugin.DragDrop', {

                                    })
                                ],
                                listeners: {
                                    beforedrop: {
                                        fn: me.onGriddragdroppluginBeforeDrop,
                                        scope: me
                                    }
                                }
                            },
                            selModel: Ext.create('Ext.selection.RowModel', {

                            })
                        },
                        {
                            xtype: 'treepanel',
                            flex: 1,
                            id: 'menu',
                            title: 'Menú del Usuario',
                            store: 'mantenimiento.local.permisos.menuusuario',
                            displayField: 'nombre',
                            rootVisible: false,
                            viewConfig: {

                            },
                            listeners: {
                                itemappend: {
                                    fn: me.onMenuItemAppend,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    flex: 1,
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'buttongroup',
                            title: 'Acciones',
                            columns: 4,
                            layout: {
                                columns: 4,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    hidden: true,
                                    iconCls: 'icon-page_add',
                                    text: 'Nuevo',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickNuevo,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-page_save',
                                    text: 'Guardar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickGuardar,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-page_delete',
                                    text: 'Borrar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickBorrar,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    name: 'cambiarIdentificacion',
                                    enableToggle: true,
                                    iconCls: 'icon-user_edit',
                                    text: 'Cambiar Identificación',
                                    tooltip: 'Habilita el cambio de identificacion para el usuario en la interfaz. Una vez activado puede cambiar la identificacion y luego guardar los datos.',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickCambiarIdentificacion,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 2,
                            layout: {
                                columns: 2,
                                type: 'table'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-door_out',
                                    text: 'Salir',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                beforeshow: {
                    fn: me.onWindowBeforeShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onComboboxSelect1: function(combo, records, eOpts) {
        if(this.cambiandoIdentificacion==1){
            return;
        }
        var combo=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];
        this.traerPersona(records[0].get('idtipoidentificacion'), combo.getValue());

    },

    onComboboxKeyup: function(textfield, e, eOpts) {
        if(this.cambiandoIdentificacion==1){
            return;
        }

        siadno.limpiarFormulario('MantenimientoLocalPermisosUsuarios', null, ['idtipoidentificacion', 'identificacion']);
        var key=e.getKey();
        if(key==13){        
            var comboIdTipoIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];
            var comboIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];        
            this.traerPersona(comboIdTipoIdentificacion.getValue(), comboIdentificacion.getValue());
        }
    },

    onComboboxBlur: function(field, eOpts) {
        if(this.cambiandoIdentificacion==1){
            return;
        }
        var hidden=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios hidden[name=idpersona]')[0];
        var idPersona=hidden.getValue();
        if(Ext.isEmpty(idPersona)){    
            var comboIdTipoIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];    
            var comboIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];            
            this.traerPersona(comboIdTipoIdentificacion.getValue(), comboIdentificacion.getValue());    
        }
    },

    onComboboxSelect: function(combo, records, eOpts) {
        combo=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];
        combo.setValue(records[0].get('idtipoidentificacion')); 
        var comboIdTipoIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];    
        var comboIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];            
        this.traerPersona(comboIdTipoIdentificacion.getValue(), records[0].get('identificacion'));
    },

    onGriddragdroppluginBeforeDrop1: function(node, data, overModel, dropPosition, dropFunction, eOpts) {
        var hidden=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios hidden[name=idusuario]')[0];
        var idUsuario=hidden.getValue();
        if(idUsuario==0){
            return false;
        }
        var idPerfil=data.records[0].get('idperfil');

        var grid1=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=noAsignados]')[0];
        var grid2=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=asignados]')[0];
        var tree=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios treepanel[id=menu]')[0]; 

        //grid1.el.mask('Quitando perfil, espere...', 'x-mask-loading');          
        //grid2.el.mask('Quitando perfil, espere...', 'x-mask-loading');         
        //tree.el.mask('Quitando perfil, espere...', 'x-mask-loading');   

        var callback=function(params, result){
            params.grid1.el.unmask();            
            params.grid2.el.unmask();
            params.tree.el.unmask();

            params.grid2.getStore().getProxy().extraParams={idusuario:params.idUsuario};
            params.grid2.getStore().load(); 

            params.grid1.getStore().getProxy().extraParams={idusuario:params.idUsuario};
            params.grid1.getStore().load(); 
        };

        siadno.ajax('clases/interfaces/mantenimiento/local/permisos/InterfazUsuarios.php', {accion:this.QUITAR_PERFIL, idusuario:idUsuario, idperfil:idPerfil}, callback, {grid1:grid1, grid2:grid2, tree:tree, idUsuario:idUsuario});
    },

    onGriddragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropFunction, eOpts) {
        var hidden=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios hidden[name=idusuario]')[0];
        var idUsuario=hidden.getValue();
        if(idUsuario==0){
            return false;
        }
        var idPerfil=data.records[0].get('idperfil');

        var grid1=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=noAsignados]')[0];
        var grid2=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=asignados]')[0];
        var tree=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios treepanel[id=menu]')[0]; 

        //grid1.el.mask('Asignando perfil, espere...', 'x-mask-loading');          
        //grid2.el.mask('Asignando perfil, espere...', 'x-mask-loading');         
        //tree.el.mask('Asignando perfil, espere...', 'x-mask-loading');   

        var callback=function(params, result){
            params.grid1.el.unmask();            
            params.grid2.el.unmask();
            params.tree.el.unmask();

            params.grid2.getStore().getProxy().extraParams={idusuario:params.idUsuario};
            params.grid2.getStore().load(); 

            params.grid1.getStore().getProxy().extraParams={idusuario:params.idUsuario};
            params.grid1.getStore().load(); 
        };

        siadno.ajax('clases/interfaces/mantenimiento/local/permisos/InterfazUsuarios.php', {accion:this.AGREGAR_PERFIL, idusuario:idUsuario, idperfil:idPerfil}, callback, {grid1:grid1, grid2:grid2, tree:tree, idUsuario:idUsuario});
    },

    onMenuItemAppend: function(nodeinterface, node, index, eOpts) {
        siadno.cambiarIconoNodo(node);
    },

    onButtonClickNuevo: function(button, e, eOpts) {

    },

    onButtonClickGuardar: function(button, e, eOpts) {
        var callback=function(callbackParams, result, estado){            
            var button=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios button[name=cambiarIdentificacion]')[0];
            button.toggle(false);        
            this.cambiandoIdentificacion=0;    


            if(result.success){
                var identificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];
                var tipoIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];    
                this.traerPersona(tipoIdentificacion.getValue(),identificacion.getValue());
            }
        };

        siadno.enviarFormulario.call(this, false, 'MantenimientoLocalPermisosUsuarios form', {accion:siadno.GUARDAR_DATOS}, callback, null);

    },

    onButtonClickBorrar: function(button, e, eOpts) {
        if(this.cambiandoIdentificacion==1){
            Ext.MessageBox.alert('Informacion', 'Desactive el cambio de identificacion antes de intentar borrar el usuario'); 
            return;
        }
        var callback=function(){        
            var identificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];
            var tipoIdentificacion=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];    
            this.traerPersona(tipoIdentificacion.getValue(),identificacion.getValue());
        };

        siadno.enviarFormulario.call(this, false, 'MantenimientoLocalPermisosUsuarios form', {accion:siadno.BORRAR_DATOS}, callback, null);
    },

    onButtonClickCambiarIdentificacion: function(button, e, eOpts) {
        var hidden=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios hidden[name=idpersona]')[0];
        var idPersona=hidden.getValue();

        if(Ext.isEmpty(idPersona) || idPersona==0){
            button.toggle(false);
            Ext.MessageBox.alert('Informacion', 'Traiga una persona a la interfaz antes de intentar hacer cambio de identificacion'); 
            return;
        }

        if(this.cambiandoIdentificacion==0){
            this.cambiandoIdentificacion=1;
            button.toggle(true);
            Ext.MessageBox.alert('Informacion', 'Se ha activado el cambio de identificacion. Modifique la identificacion y haga click en guardar.'); 
        }else{
            this.cambiandoIdentificacion=0;
            button.toggle(false);
        }
    },

    onButtonClick: function(button, e, eOpts) {
        this.close();
    },

    onWindowBeforeShow: function(component, eOpts) {
        var clase=Ext.ClassManager.get("siadno.store.sistema.tiposIdentificacionPersonaNatural");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.sistema.tiposIdentificacionPersonaNatural', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/tiposIdentificacion.php',
                            extraParams:{esPersonaNatural:1},
                            reader: {
                                type: 'json',
                                idProperty: 'idtipoidentificacion',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idtipoidentificacion'
                        },
                        {
                            name: 'nombre'
                        },
                        {
                            name: 'abreviatura'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.sistema.paises");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.sistema.paises', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/paises.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idpais',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idpais'
                        },
                        {
                            name: 'nacionalidad'
                        },
                        {
                            name: 'nombre'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.sistema.personas");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.sistema.personas', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/personas.php',
                            extraParams:{esPersonaNatural:1},
                            reader: {
                                type: 'json',
                                idProperty: 'idpersona',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idpersona'
                        },
                        {
                            name: 'idtipoidentificacion'
                        },
                        {
                            name: 'identificacion'
                        },
                        {
                            name: 'abreviatura'
                        },
                        {
                            name: 'nombres'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }


        clase=Ext.ClassManager.get("siadno.store.mantenimiento.local.permisos.perfilesAsignados");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.mantenimiento.local.permisos.perfilesAsignados', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            extraParams:{accion:104},
                            url: 'clases/interfaces/mantenimiento/local/permisos/InterfazUsuarios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idperfil',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idperfil'
                        },
                        {
                            name: 'nombre'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.mantenimiento.local.permisos.perfilesNoAsignados");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.mantenimiento.local.permisos.perfilesNoAsignados', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            extraParams:{accion:105},
                            url: 'clases/interfaces/mantenimiento/local/permisos/InterfazUsuarios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idperfil',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idperfil'
                        },
                        {
                            name: 'nombre'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        var grid=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid')[0];
        grid.reconfigure(Ext.create('siadno.store.mantenimiento.local.permisos.perfilesNoAsignados'));

        grid=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid')[1];
        grid.reconfigure(Ext.create('siadno.store.mantenimiento.local.permisos.perfilesAsignados'));

        var combo=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=identificacion]')[0];
        combo.bindStore(Ext.create('siadno.store.sistema.personas'));
        var listConfig={
            loadingText: 'Buscando...',
            emptyText: 'No se encontraron personas.',               
            getInnerTpl: function() {
                return '<div>{abreviatura} {identificacion}</div><div>{nombres}</div>';                    
            }
        };
        combo.listConfig=listConfig;

        combo=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idtipoidentificacion]')[0];
        combo.bindStore(Ext.create('siadno.store.sistema.tiposIdentificacionPersonaNatural'));
        combo.getStore().load(); 

        combo=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios combobox[name=idpais]')[0];
        combo.bindStore(Ext.create('siadno.store.sistema.paises'));
        combo.getStore().load(); 
    },

    traerPersona: function(idtipoidentificacion, identificacion) {
        var callback=function(){    
            var hidden=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios hidden[name=idusuario]')[0];    
            var idUsuario=hidden.getValue();        
            var grid1=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=noAsignados]')[0];
            var grid2=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios grid[id=asignados]')[0];
            var tree=Ext.ComponentQuery.query('MantenimientoLocalPermisosUsuarios treepanel[id=menu]')[0];        

            var nodoRaiz=null;

            nodoRaiz=tree.getRootNode();                       
            nodoRaiz.removeAll();                

            if(idUsuario==0){                
                //grid1.el.mask('La persona no es un usuario', 'x-mask-loading');          
                //grid2.el.mask('La persona no es un usuario', 'x-mask-loading');         
                //tree.el.mask('La persona no es un usuario', 'x-mask-loading');         

                grid2.getStore().getProxy().extraParams.idusuario=0;
                grid2.getStore().load(); 

                grid1.getStore().getProxy().extraParams.idusuario=0;
                grid1.getStore().load(); 
            }else{
                grid1.el.unmask();            
                grid2.el.unmask();        

                grid2.getStore().getProxy().extraParams.idusuario=idUsuario;
                grid2.getStore().load(); 

                grid1.getStore().getProxy().extraParams.idusuario=idUsuario;
                grid1.getStore().load();                 

                tree.getStore().getProxy().extraParams.idusuario=idUsuario;                
                tree.getStore().load({
                    scope: this,
                    callback: function(records, operation, success){                        
                        if(records.length>0){                   
                            var micallback=function(){                                                                            
                                tree.el.unmask();                
                            };  
                            records[0].expand(false, micallback);
                        }        
                    }
                });
            }
        };

        siadno.enviarFormulario.call(this, true, 'MantenimientoLocalPermisosUsuarios form',{idtipoidentificacion:idtipoidentificacion, identificacion:identificacion}, callback, null);
    }

});