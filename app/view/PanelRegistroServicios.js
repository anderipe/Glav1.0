/*
 * File: app/view/PanelRegistroServicios.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('siadno.view.PanelRegistroServicios', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.PanelRegistroServicios',

    height: 600,
    width: 360,
    layout: {
        type: 'fit'
    },
    collapsed: false,
    iconCls: 'icon-car_start',
    title: 'Registro',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    height: 541,
                    id: 'formularioServicios',
                    width: 598,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    bodyPadding: 10,
                    url: 'clases/interfaces/InterfazRegistroServicios.php',
                    items: [
                        {
                            xtype: 'fieldset',
                            height: 160,
                            padding: '0 10 0 10',
                            title: 'Datos del Servicio',
                            items: [
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'observaciones'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'idautomotor'
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    height: 28,
                                    layout: {
                                        align: 'stretch',
                                        type: 'hbox'
                                    },
                                    fieldLabel: '',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            flex: 5,
                                            fieldLabel: 'Código',
                                            name: 'idservicio'
                                        },
                                        {
                                            xtype: 'button',
                                            flex: 1,
                                            id: 'botonCargar',
                                            margin: '0 0 3 3',
                                            maxWidth: 60,
                                            minWidth: 60,
                                            width: 60,
                                            iconCls: 'icon-page_go',
                                            text: 'Cargar',
                                            listeners: {
                                                click: {
                                                    fn: me.onButtonClick3,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: 'Tipo Automotor',
                                    name: 'idtipoautomotor',
                                    value: 0,
                                    editable: false,
                                    displayField: 'descripcion',
                                    queryMode: 'local',
                                    store: 'dumyStore',
                                    valueField: 'idtipoautomotor',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange11,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Matricula',
                                    name: 'matricula'
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: 'Combo',
                                    name: 'idcombo',
                                    value: 0,
                                    editable: false,
                                    displayField: 'descripcion',
                                    queryMode: 'local',
                                    store: 'dumyStore',
                                    valueField: 'idcombo',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    fieldLabel: 'Agregar Servicio',
                                    name: 'idrubro',
                                    value: 0,
                                    editable: false,
                                    displayField: 'descripcion',
                                    queryMode: 'local',
                                    store: 'dumyStore',
                                    valueField: 'idrubro',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange2,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            layout: {
                                type: 'fit'
                            },
                            title: 'Servicios Incluidos',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    accionBorrar: '117',
                                    margin: '0 0 10 0',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'descripcion',
                                            text: 'Descripción',
                                            flex: 8
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            summaryType: 'sum',
                                            dataIndex: 'cantidad',
                                            groupable: true,
                                            text: 'Unit',
                                            flex: 1,
                                            format: '0,000',
                                            editor: {
                                                xtype: 'numberfield',
                                                allowDecimals: false,
                                                decimalPrecision: 0,
                                                maxValue: 10000,
                                                minValue: 1
                                            }
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            summaryRenderer: function(val, params, data) {

                                            },
                                            dataIndex: 'valorunitario',
                                            text: 'V/Unit',
                                            flex: 4,
                                            format: '0,000',
                                            editor: {
                                                xtype: 'numberfield',
                                                allowDecimals: false,
                                                decimalPrecision: 0,
                                                minValue: 0,
                                                step: 1000
                                            }
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            summaryType: 'sum',
                                            dataIndex: 'iva',
                                            groupable: true,
                                            text: 'I.V.A',
                                            flex: 5
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            summaryType: 'sum',
                                            dataIndex: 'total',
                                            groupable: true,
                                            text: 'Total',
                                            flex: 5
                                        }
                                    ],
                                    features: [
                                        {
                                            ftype: 'summary'
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.CellEditing', {
                                            clicksToEdit: 1,
                                            listeners: {
                                                edit: {
                                                    fn: me.onGridcelleditingpluginEdit,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                added: {
                    fn: me.onPanelAdded,
                    scope: me
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'buttongroup',
                            columns: 4,
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'botonNuevo',
                                    iconCls: 'icon-page_green',
                                    text: 'Nuevo',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick2,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'botonObservaciones',
                                    iconCls: 'icon-page',
                                    text: 'Observaciones',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'botonGuardar',
                                    iconCls: 'icon-page_save',
                                    text: 'Guardar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    aacion: 'borrar',
                                    id: 'botonBorrar',
                                    iconCls: 'icon-page_delete',
                                    text: 'Borrar',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClickBorrar1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onButtonClick3: function(button, e, eOpts) {
        siadno.limpiarFormulario('PanelRegistroServicios form[id=formularioServicios]', null, ['idservicio']);

        var callback=function(){
            this.gridServicios.getStore().un("clear", callback, this);    

            for(var i=0; i<5; i++){
                this.botones[i].setDisabled(false);
            }        

            this.traerServicio(this.idServicio.getValue());
        };

        this.gridServicios.getStore().on("clear", callback, this);

        for(var i=0; i<5; i++){
            this.botones[i].setDisabled(true);
        }

        this.gridServicios.getStore().removeAll(false);

    },

    onComboboxChange11: function(field, newValue, oldValue, eOpts) {

        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idcombo]')[0];
        combo.setValue(0);
        combo.getStore().getProxy().extraParams.idtipoautomotor=newValue;
        combo.getStore().load();

        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idrubro]')[0];
        combo.setValue(0);
        combo.getStore().getProxy().extraParams.idtipoautomotor=newValue;
        combo.getStore().load();

        this.gridServicios.getStore().removeAll(false);
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var callback=function(params, result, exito){
            if(exito==false){
                Ext.MessageBox.alert('El servidor parece no responder', e.message);
                return;
            }


            var rubros=result.data;        
            var grid=Ext.ComponentQuery.query('PanelRegistroServicios grid')[0];            
            var store=grid.getStore();



            for(var i=0; i<rubros.length; i++){
                var idRubro=rubros[i].idrubro;
                var indice=store.findExact('idrubro', idRubro);
                var model=null;

                if(indice==-1){
                    model=new store.model();            
                }else{
                    model=store.getAt(indice);
                }
                /**                                                                                                
                */

                model.setId(idRubro);        
                model.set('idrubro', idRubro);
                model.set('descripcion', rubros[i].descripcion);
                model.set('porcentajeiva', rubros[i].porcentajeiva);
                model.set('valorunitario', rubros[i].valorunitario);
                model.set('cantidad', 1);
                model.set('iva', (rubros[i].valorunitario/100)*rubros[i].porcentajeiva);        
                model.set('total', rubros[i].valorunitario*1+((rubros[i].valorunitario/100)*rubros[i].porcentajeiva));
                //model.commit();

                if(indice==-1){
                    store.add(model);
                }
            }


            grid.getView().refresh();    

        };

        siadno.ajax('clases/interfaces/InterfazRegistroServicios.php', {accion:107, idcombo:newValue}, callback);
    },

    onComboboxChange2: function(field, newValue, oldValue, eOpts) {
        if(newValue<=0)
        return;
        var comboStore=field.getStore();
        var comboIndice=comboStore.findExact('idrubro', newValue);

        if(comboIndice<0)
        return;

        var rubro=comboStore.getAt(comboIndice);
        var idRubro=rubro.get('idrubro');    

        if(idRubro<=0)
        return;

        var grid=Ext.ComponentQuery.query('PanelRegistroServicios grid')[0];            
        var store=grid.getStore();
        var indice=store.findExact('idrubro', idRubro);
        var model=null;

        if(indice==-1){
            model=new store.model();            
        }else{
            model=store.getAt(indice);
        }

        model.setId(idRubro);
        model.set('idrubro', idRubro);
        model.set('descripcion', rubro.get('descripcion'));
        model.set('porcentajeiva', rubro.get('porcentajeiva'));
        model.set('valorunitario', rubro.get('valorunitario'));
        model.set('iva', (rubro.get('valorunitario')/100)*rubro.get('porcentajeiva'));
        model.set('cantidad', 1);
        model.set('total', rubro.get('valorunitario')*1+((rubro.get('valorunitario')/100)*rubro.get('porcentajeiva')));        

        //model.commit();

        if(indice==-1){
            store.add(model);
        }

        grid.getView().refresh();

    },

    onGridcelleditingpluginEdit: function(editor, e, eOpts) {
        e.record.set('iva', (e.record.get('valorunitario')/100)*e.record.get('porcentajeiva'));        
        e.record.set('total', (e.record.get('valorunitario')*e.record.get('cantidad'))*(1+(e.record.get('porcentajeiva')/100)));
        this.gridServicios.getView().refresh();   
    },

    onPanelAdded: function(component, container, pos, eOpts) {
        var clase=Ext.ClassManager.get("siadno.store.registroservicios.tiposidentificacion");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.tiposidentificacion', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: true,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:101},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idtipoidentificacion',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idtipoidentificacion'
                        },
                        {
                            name: 'nombre'
                        },
                        {
                            name: 'abreviatura'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.tiposautomotor");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.tiposautomotor', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: true,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:102},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idtipoautomotor',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idtipoautomotor'
                        },
                        {
                            name: 'descripcion'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.marcasautomotor");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.marcasautomotor', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: true,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:103},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idmarcaautomotor',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idmarcaautomotor'
                        },
                        {
                            name: 'descripcion'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.combos");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.combos', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:105},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idcombo',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idcombo'
                        },
                        {
                            name: 'descripcion'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.rubros");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.rubros', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),
                        proxy: {
                            extraParams:{accion:106},
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idrubro',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idrubro'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'porcentajeiva'
                        },
                        {
                            name: 'valorunitario'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.servicios");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.servicios', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        autoLoad: false,
                        storeId: Ext.id(),                
                        proxy: {
                            type: 'ajax',
                            url: 'clases/interfaces/InterfazRegistroServicios.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idrubro',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [                                
                        {
                            name: 'idrubro'
                        },
                        {
                            name: 'descripcion'
                        },
                        {
                            name: 'porcentajeiva'
                        },
                        {
                            name: 'valorunitario',
                            type: 'float'
                        },
                        {
                            name: 'cantidad',
                            type: 'int'
                        },
                        {
                            name: 'iva',
                            type: 'float'
                        },
                        {
                            name: 'total',
                            type: 'float'
                        }
                        ]

                    }, cfg)]);
                }
            });
        }

        clase=Ext.ClassManager.get("siadno.store.registroservicios.personas");
        if(Ext.isEmpty(clase)){
            Ext.define('siadno.store.registroservicios.personas', {
                extend: 'Ext.data.Store',

                constructor: function(cfg) {
                    var me = this;
                    cfg = cfg || {};
                    me.callParent([Ext.apply({
                        storeId: Ext.id(),
                        proxy: {
                            type: 'ajax',
                            url: 'clases/data/sistema/personas.php',
                            reader: {
                                type: 'json',
                                idProperty: 'idpersona',
                                messageProperty: 'msg',
                                root: 'data'
                            }
                        },
                        fields: [
                        {
                            name: 'idpersona'
                        },
                        {
                            name: 'idtipoidentificacion'
                        },
                        {
                            name: 'identificacion'
                        },
                        {
                            name: 'abreviatura'
                        },
                        {
                            name: 'nombres'
                        }
                        ]
                    }, cfg)]);
                }
            });
        }


        var combo=null;

        /*
        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idtipoidentificacion]')[0];
        combo.bindStore(Ext.create('siadno.store.registroservicios.tiposidentificacion'));
        combo.getStore().load();

        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=identificacion]')[0];
        combo.bindStore(Ext.create('siadno.store.registroservicios.personas'));
        var listConfig={
        loadingText: 'Buscando...',
        emptyText: 'No se encontraron personas.',               
        getInnerTpl: function() {
        return '<div>{abreviatura} {identificacion}</div><div>{nombres}</div>';                    
        }
        };
        combo.listConfig=listConfig;
        */

        this.textServicio=Ext.ComponentQuery.query('PanelRegistroServicios textfield[name=idservicio]')[0];
        this.matricula=Ext.ComponentQuery.query('PanelRegistroServicios textfield[name=matricula]')[0];
        this.observaciones=Ext.ComponentQuery.query('PanelRegistroServicios hidden[name=observaciones]')[0];
        this.tipoAutomotor=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idtipoautomotor]')[0];
        this.combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idcombo]')[0];
        this.rubro=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idrubro]')[0];

        this.botonNuevo=Ext.ComponentQuery.query('PanelRegistroServicios button[id=botonNuevo]')[0];
        this.botonObservaciones=Ext.ComponentQuery.query('PanelRegistroServicios button[id=botonObservaciones]')[0];
        this.botonGuardar=Ext.ComponentQuery.query('PanelRegistroServicios button[id=botonGuardar]')[0];
        this.botonCargar=Ext.ComponentQuery.query('PanelRegistroServicios button[id=botonCargar]')[0];
        this.botonBorrar=Ext.ComponentQuery.query('PanelRegistroServicios button[id=botonBorrar]')[0];

        //alert(1);
        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idtipoautomotor]')[0];
        combo.bindStore(Ext.create('siadno.store.registroservicios.tiposautomotor'));
        combo.getStore().load();
        //alert(2);
        //combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idmarcaautomotor]')[0];
        //combo.bindStore(Ext.create('siadno.store.registroservicios.marcasautomotor'));
        //combo.getStore().load();
        //alert(3);
        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idcombo]')[0];
        combo.bindStore(Ext.create('siadno.store.registroservicios.combos'));
        combo.getStore().load();
        //alert(4);
        combo=Ext.ComponentQuery.query('PanelRegistroServicios combobox[name=idrubro]')[0];
        combo.bindStore(Ext.create('siadno.store.registroservicios.rubros'));
        combo.getStore().load();
        //alert(5);

        this.gridServicios=Ext.ComponentQuery.query('PanelRegistroServicios grid')[0];
        this.gridServicios.reconfigure(Ext.create('siadno.store.registroservicios.servicios'));

        this.idServicio=Ext.ComponentQuery.query('PanelRegistroServicios field[name=idservicio]')[0];

        this.botones=Ext.ComponentQuery.query('PanelRegistroServicios button');

        this.botonNuevo.setDisabled(true);
        this.botonObservaciones.setDisabled(false);
        this.botonGuardar.setDisabled(false);
        this.botonCargar.setDisabled(false);
        this.botonBorrar.setDisabled(true); 

        //grid.getStore().load();
    },

    onButtonClick2: function(button, e, eOpts) {
        var callback=function(){
            //alert('ok');    
            this.gridServicios.getStore().un("clear", callback, this);
            siadno.limpiarFormulario('PanelRegistroServicios form[id=formularioServicios]', null, null);

            for(var i=0; i<5; i++){
                this.botones[i].setDisabled(false);
            }
        };

        this.gridServicios.getStore().on("clear", callback, this);

        for(var i=0; i<5; i++){
            this.botones[i].setDisabled(true);
        }
        this.gridServicios.getStore().removeAll(false);

        this.textServicio.setDisabled(false);
        this.matricula.setDisabled(false);
        //this.observaciones.setDisabled(true);
        this.tipoAutomotor.setDisabled(false);
        this.combo.setDisabled(false);
        this.rubro.setDisabled(false);
        this.gridServicios.setDisabled(false);

        this.botonNuevo.setDisabled(true);
        this.botonObservaciones.setDisabled(false);
        this.botonGuardar.setDisabled(false);
        this.botonCargar.setDisabled(false);
        this.botonBorrar.setDisabled(false);            




    },

    onButtonClick1: function(button, e, eOpts) {
        Ext.Msg.prompt('Observaciones', 'Digite las observaciones del servicio:', function(btn, text){
            if (btn == 'ok'){
                this.observaciones.setValue(text);
            }
        }, this, true, this.observaciones.getValue());
    },

    onButtonClick: function(button, e, eOpts) {

        var callback=function(callbackParams, result, estado){    
            if(!estado){
                for(var i=0; i<5; i++){
                    this.botones[i].setDisabled(false);
                }
                return;
            }    
            if(result.success==false){
                for(var i=0; i<5; i++){
                    this.botones[i].setDisabled(false);
                }

                return;
            }

            var otroCallback = function(){
                this.textServicio.setValue(result.idservicio);
                for(var i=0; i<5; i++){
                    this.botones[i].setDisabled(false);
                }

                this.botonNuevo.setDisabled(false);
                this.botonObservaciones.setDisabled(true);
                this.botonGuardar.setDisabled(true);
                this.botonCargar.setDisabled(false);        
                this.botonBorrar.setDisabled(true);            


                this.textServicio.setDisabled(true);
                this.matricula.setDisabled(true);
                //this.observaciones.setDisabled(true);
                this.tipoAutomotor.setDisabled(true);
                this.combo.setDisabled(true);
                this.rubro.setDisabled(true);
                this.gridServicios.setDisabled(true);                
            };

            //for(var i=0; i<5; i++){
            //    this.botones[i].setDisabled(true);
            //}

            this.gridServicios.getStore().getProxy().extraParams.accion=110;
            this.gridServicios.getStore().getProxy().extraParams.idservicio=result.idservicio;
            this.gridServicios.getStore().sync({callback:otroCallback, scope:this});           

        };
        if(this.gridServicios.getStore().count()==0){
            Ext.MessageBox.alert('Error', 'Debe agregar almenos un servicio en la lista');
            return;
        }

        for(var i=0; i<5; i++){
            this.botones[i].setDisabled(true);
        }
        siadno.enviarFormulario.call(this, false, 'PanelRegistroServicios form[id=formularioServicios]', {accion:108}, callback, null);
    },

    onButtonClickBorrar1: function(button, e, eOpts) {
        siadno.borrarRegistroGrid(this.gridServicios, null, 'idrubro');    
    },

    traerPersona: function(idtipoidentificacion, identificacion) {
        siadno.enviarFormulario.call(this, true, 'PanelRegistroServicios form',{idtipoidentificacion:idtipoidentificacion, identificacion:identificacion}, null, null);
    },

    traerServicio: function(idServicio) {
        var callback=function(){        
            var matricula=this.matricula.getValue();
            if(!Ext.isEmpty(matricula)){ 

                var otroCallback = function(){            
                    this.botonNuevo.setDisabled(false);
                    this.botonObservaciones.setDisabled(true);
                    this.botonGuardar.setDisabled(true);
                    this.botonCargar.setDisabled(false);
                    this.botonBorrar.setDisabled(true);            
                };

                for(var i=0; i<5; i++){
                    this.botones[i].setDisabled(true);
                }

                this.gridServicios.getStore().getProxy().extraParams.accion=111;
                this.gridServicios.getStore().getProxy().extraParams.idservicio=idServicio;
                this.gridServicios.getStore().load({callback:otroCallback, scope:this});
            }
        };


        siadno.enviarFormulario.call(this, true, 'PanelRegistroServicios form[id=formularioServicios]',{accion:109, idservicio:idServicio}, callback, null);
    }

});