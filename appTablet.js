/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});

Ext.application({
    stores: [
        'mantenimiento.privado.modulosenperfil',
        'mantenimiento.privado.modulosnoenperfil',
        'mantenimiento.local.permisos.menuusuario',
        'mantenimiento.privado.modulos',
        'dumyStore'
    ],
    name: 'siadno',
    controllers: [
        'MyController'
    ],

    launch: function() {
        siadno.enviarFormulario=this.enviarFormulario;
        siadno.enviarCambiosGrid=this.enviarCambiosGrid;
        siadno.rollbackCambiosGrid=this.rollbackCambiosGrid;
        siadno.commitCambiosGrid=this.commitCambiosGrid;
        siadno.borrarRegistroGrid=this.borrarRegistroGrid;
        siadno.nuevoRegistroGrid=this.nuevoRegistroGrid;
        siadno.cambiarIconoNodo=this.cambiarIconoNodo;
        siadno.ajax=this.ajax;
        siadno.crearMenu=this.crearMenu;
        siadno.crearTablet=this.crearTablet;
        siadno.limpiarFormulario=this.limpiarFormulario;
        siadno.imprimirPostConsulta=this.imprimirPostConsulta;
        siadno.descargarPostConsulta=this.descargarPostConsulta;

        siadno.GUARDAR_DATOS = 1;
        siadno.BORRAR_DATOS = 2;
        siadno.NUEVO=10;
        siadno.IMPRIMIR=1001;
        siadno.DESCARGAR_CSV=1002;
        siadno.DESCARGAR_PDF=1003;

        var onSuccessOrFail = function(response, opts) {    
            try{                
                var result = Ext.decode(response.responseText);  
                if(result.success){                                               
                    var interfazAutenticacion=Ext.create('siadno.view.sistema.autenticacion');
                    interfazAutenticacion.show(); 
                    //Comentar las siguientes 3 lineas para salir del modulo depuracion
                    //var formulario=(interfazAutenticacion.query('form')[0]).getForm();
                    //formulario.setValues({login:'mabicho', password:'y2k13721551'});            
                    //interfazAutenticacion.onButtonAceptar();            
                }else{            
                    Ext.MessageBox.alert('Error',result.msg);
                }
            }catch(e){        
                Ext.MessageBox.alert('Error',response.responseText);                        
            }                                          
        };

        Ext.Ajax.request({
            method:'POST',
            url: 'clases/interfaces/InterfazCierreForzado.php',
            timeout:10000,
            success:onSuccessOrFail,
            failure:onSuccessOrFail,
            disableCaching:true
        });
    },

    enviarFormulario: function(load, formQuery, formParams, callback, callbackParams) {
        var formPanel=Ext.ComponentQuery.query(formQuery)[0];

        var onSuccess = function(form, action) {     
            try{
                if(!Ext.isEmpty(formPanel.el)){
                    formPanel.el.unmask();
                }

                var result = action.result;    
                if(!result.success){
                    throw result.msg;
                }

                if(!Ext.isEmpty(result.msg)){
                    Ext.MessageBox.alert('Exito',result.msg);
                }

                if(Ext.isFunction(callback)){
                    callback.call(this, callbackParams, result, true);
                }        
            }catch(e){    
                if(Ext.isEmpty(e)){
                    Ext.MessageBox.alert('Error en recepcion', 'Nulo');
                    return;
                }
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error en recepcion', e.message);
                }else{
                    Ext.MessageBox.alert('Error en recepcion', e);
                }        
            }
        };

        var onFail = function(form, action) {             
            try{
                if(!Ext.isEmpty(formPanel.el)){
                    formPanel.el.unmask();
                }

                switch (action.failureType) {            
                    case Ext.form.action.Action.CONNECT_FAILURE:{                                
                        if(Ext.isFunction(callback)){                    
                            callback.call(this, callbackParams, result, false);
                        }
                        break;
                    }
                    case 'server':{   

                        var result = action.result;   
                        if(!Ext.isEmpty(result.msg)){
                            Ext.MessageBox.alert('Error',result.msg);
                        }


                        //if(!result.success){
                        //    throw result.msg;
                        //}                


                        if(Ext.isFunction(callback)){

                            callback.call(this, callbackParams, result, true);
                        }
                    } 

                    case 'load':{

                        var result = action.result;   
                        if(!Ext.isEmpty(result.msg)){
                            Ext.MessageBox.alert('Error',result.msg);
                        }


                        //if(!result.success){
                        //    throw result.msg;
                        //}                


                        if(Ext.isFunction(callback)){

                            callback.call(this, callbackParams, result, true);
                        }
                    }            
                }               
            }catch(e){    
                if(Ext.isEmpty(e)){
                    Ext.MessageBox.alert('Error en recepcion', 'Nulo');
                    return;
                }
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error en recepcion', e.message);
                }else{
                    Ext.MessageBox.alert('Error en recepcion', e);
                }        
            }
        };

        var params={    
            params: formParams,
            success : onSuccess,
            failure : onFail,
            scope :this
        };

        if(load){    
            formPanel.getForm().load(params);    
        }else{        
            formPanel.getForm().submit(params);        
        }
    },

    limpiarFormulario: function(formQuery, campo, excepciones) {
        var campos;
        if(Ext.isEmpty(campo))
        campos=Ext.ComponentQuery.query(formQuery+' field');
        else
        campos=Ext.ComponentQuery.query(formQuery+' '+campo);

        var indice;
        for(indice in campos){
            if(Ext.isArray(excepciones)){
                var encontrado=false;
                for(var i in excepciones){
                    if(excepciones[i]==campos[indice].name){
                        encontrado=true;
                        break;
                    }        
                }

                if(encontrado===true){
                    continue;
                }
            }

            if(campos[indice].xtype==='textfield'){
                campos[indice].setValue('');   
                continue;
            }

            if(campos[indice].xtype==='textarea'){
                campos[indice].setValue('');   
                continue;
            }

            if(campos[indice].xtype==='hiddenfield'){
                campos[indice].setValue('');   
                continue;
            }

            if(campos[indice].xtype==='combobox'){
                campos[indice].setValue(0);   
                continue;
            }

            if(campos[indice].xtype==='combobox'){
                campos[indice].setValue(0);   
                continue;
            }

            if(campos[indice].xtype==='checkboxfield'){
                campos[indice].setValue(false);   
                continue;
            }

            if(campos[indice].xtype==='radiofield'){
                campos[indice].setValue(false);   
                continue;
            }   

            if(campos[indice].xtype==='datefield'){
                campos[indice].initValue();   
                continue;
            } 


        }
    },

    enviarCambiosGrid: function(grid, url, idField, callback, callbackParams) {
        var store=grid.getStore();


        var recordsToSend = [];
        var modificados = store.getUpdatedRecords();
        Ext.each(modificados, function(record) {
            recordsToSend.push(record.data);
        });

        var nuevos = store.getNewRecords();
        Ext.each(nuevos, function(record) {
            recordsToSend.push(record.data);
        });

        if (recordsToSend.length > 0) {             
            //return;
            grid.el.mask('Guardando...', 'x-mask-loading');        
            recordsToSend = Ext.encode(recordsToSend);    
            var onSuccessOrFail=function(response, opts){           
                grid.el.unmask();                
                try{                       
                    var result = Ext.decode(response.responseText);                        
                    if(!result.success){                                   
                        throw result.msg;
                    }            
                    var nuevos=result.data;            
                    for(var i in nuevos){                
                        var ind=store.findExact(idField, nuevos[i].idtemporal);                
                        var registro=store.getAt(ind);                
                        registro.set(idField, nuevos[i].idnuevo);                  
                    }

                    siadno.commitCambiosGrid(grid);   


                    if(!Ext.isEmpty(result.msg)){
                        Ext.MessageBox.alert('Exito',result.msg);
                    }else{
                        Ext.MessageBox.alert('Exito', 'Los cambios en la lista han sido guardados');
                    }

                    if(Ext.isFunction(callback)){
                        callback.call(this, callbackParams, result);
                    }                                           
                }catch(e){                             
                    if(Ext.isEmpty(e)){
                        Ext.MessageBox.alert('Error en recepcion', 'Nulo');
                        return;
                    }
                    if(!Ext.isEmpty(e.message)){
                        Ext.MessageBox.alert('Error en recepcion', e.message);
                    }else{
                        Ext.MessageBox.alert('Error en recepcion', e);
                    } 
                }        
            };

            if(Ext.isEmpty(url)){
                url=store.getProxy().url;
            }

            var accionEditar=siadno.GUARDAR_DATOS;
            if(!Ext.isEmpty(grid.accionEditar))
            accionEditar=grid.accionEditar;

            Ext.Ajax.request({
                url : url,
                params : {
                    actualizados : recordsToSend,
                    accion: accionEditar
                },        
                scope:this,        
                success: onSuccessOrFail,
                failure: onSuccessOrFail
            });        
        }
    },

    rollbackCambiosGrid: function(grid) {
        var store=grid.getStore();
        grid.el.mask('Deshaciendo...', 'x-mask-loading');    
        store.each(function(r){
            r.reject();
        });
        grid.el.unmask();
    },

    commitCambiosGrid: function(grid) {
        var store=grid.getStore();
        grid.el.mask('Commit...', 'x-mask-loading');    
        store.each(function(r){
            r.commit();
        });
        grid.el.unmask();
    },

    borrarRegistroGrid: function(grid, url, idField) {
        var selected = grid.getSelectionModel().getSelection();
        if(selected.length===0){
            Ext.MessageBox.alert('Error','Debe seleccionar un registro a eliminar'); 
            return;
        }

        var doDelete=function(btn){    
            if(btn != 'yes'){
                return;
            }    

            var rowToDelete=selected[0];
            grid.el.mask('Borrando', 'x-mask-loading');

            var onSuccessOrFail=function(response, opts){           
                grid.el.unmask();                
                try{
                    var result = Ext.decode(response.responseText);            

                    if(!result.success){                                   
                        throw result.msg;
                    }            
                    grid.store.remove(rowToDelete);
                    grid.getView().refresh();
                    if(!Ext.isEmpty(result.msg)){                
                        Ext.MessageBox.alert('Exito',result.msg); 
                    }else{
                        Ext.MessageBox.alert('Exito', 'El registro de la lista ha sido borrado');
                    }            
                }catch(err){     
                    if(!Ext.isEmpty(err.message))
                    Ext.MessageBox.alert('Error',err.message); 
                    else
                    Ext.MessageBox.alert('Error',err); 
                }        
            };

            if (rowToDelete.phantom) {        
                grid.store.remove(rowToDelete);
                grid.el.unmask();  
                grid.getView().refresh();
                return;
            }

            if(Ext.isEmpty(url)){
                url=grid.getStore().getProxy().url;
            } 

            var accionBorrar=this.BORRAR_DATOS;
            if(!Ext.isEmpty(grid.accionBorrar))
            accionBorrar=grid.accionBorrar;

            Ext.Ajax.request({
                url : url,
                params : {
                    id : rowToDelete.get(idField),
                    accion: accionBorrar
                },        
                scope:this,        
                success: onSuccessOrFail,
                failure: onSuccessOrFail
            });     
        };



        Ext.MessageBox.confirm(
        'Confirmacion de borrado',
        'Esta seguro de querer borrar este registro?',
        doDelete,
        this
        );
    },

    nuevoRegistroGrid: function(grid, idField, fields) {
        var store=grid.getStore();
        var model=new store.model();
        var idEstablecido=false;

        if(Ext.isEmpty(idField)){        
            throw 'No se ha definido el campo id del nuevo registro';    
        }

        if(!Ext.isEmpty(fields) && Ext.isObject(fields)){
            for(var i in fields){
                if(i==idField){
                    model.setId(Ext.id());
                    idEstablecido=true;
                }

                model.set(i, fields[i]);
            }
        }

        if(idEstablecido===false){
            model.setId(Ext.id());
            model.set(idField, store.idLocal);
            store.idLocal--;
        }

        model.commit();
        store.add(model);
    },

    cambiarIconoNodo: function(node) {
        var iconCss=node.get('iconcss');
        if(!Ext.isEmpty(iconCss)){
            node.set('iconCls', iconCss);
        }
    },

    ajax: function(url, params, callback, callbackParams) {
        var onSuccess = function(response, opts) {        
            try{        
                var result = Ext.decode(response.responseText);    
                if(!result.success){
                    throw result.msg;
                }

                if(!Ext.isEmpty(result.msg)){
                    Ext.MessageBox.alert('Exito',result.msg);
                }

                if(Ext.isFunction(callback)){
                    callback.call(this, callbackParams, result, true);
                }        
            }catch(e){    
                if(Ext.isEmpty(e)){
                    Ext.MessageBox.alert('Error en recepcion', 'Nulo');
                    return;
                }
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error en recepcion', e.message);
                }else{
                    Ext.MessageBox.alert('Error en recepcion', e);
                }        
            }
        };

        var onFail = function(response, opts) {        
            try{                
                if(Ext.isFunction(callback)){
                    callback.call(this, callbackParams, response, false);
                }        
            }catch(e){    
                if(Ext.isEmpty(e)){
                    Ext.MessageBox.alert('Error en recepcion', 'Nulo');
                    return;
                }
                if(!Ext.isEmpty(e.message)){
                    Ext.MessageBox.alert('Error en recepcion', e.message);
                }else{
                    Ext.MessageBox.alert('Error en recepcion', e);
                }        
            }
        };


        var timeOut=30000;
        if(!Ext.isEmpty(params) && !Ext.isEmpty(params.timeout)){
            timeOut=params.timeout;
        }

        Ext.Ajax.request({
            method:'POST',
            url:url,    
            success:onSuccess,
            failure:onFail,
            disableCaching:true,
            scope :this,
            timeout:timeOut,
            params:params    
        });
    },

    crearMenu: function() {
        var viewport=Ext.ComponentQuery.query('myviewport');
        if(viewport.length>0){
            viewport[0].destroy();    
        }

        var crearMenu=function(callbackParams, result){                
            Ext.define('siadno.view.MyViewport', {
                extend: 'Ext.container.Viewport',
                alias: 'widget.myviewport',                
                initComponent: function() {
                    var me = this;        
                    Ext.applyIf(me, {items: [result.toolbar]});        
                    me.callParent(arguments);
                }                
            });

            var viewport=Ext.create('siadno.view.MyViewport');        
            viewport.show();         
        };

        siadno.ajax.call(this, 'clases/interfaces/InterfazCrearMenu.php',{}, crearMenu, {});
    },

    crearTablet: function() {
        var crearMenu=function(callbackParams, result){                    
            var viewport=Ext.create('siadno.view.viewportTablet');        
            viewport.show();         
        };

        siadno.ajax.call(this, 'clases/interfaces/InterfazCrearMenu.php',{}, crearMenu, {});
    },

    imprimirPostConsulta: function(result) {
        try{                        
            if(!result.success){
                throw result.msg;
            }

            if(!Ext.isEmpty(result.msg)){
                Ext.MessageBox.alert('Exito',result.msg);
            }

            if(!Ext.isDefined(result.impresora) || Ext.isEmpty(result.impresora))
            throw 'El informe o documento no ha definido una impresora';

            if(!Ext.isDefined(result.impresion) || Ext.isEmpty(result.impresion))
            throw 'El informe o documento no ha definido una impresion';

            var archivo='';
            if(Ext.isDefined(result.archivo) || !Ext.isEmpty(result.archivo))
            archivo=result.archivo;

            siadno.impresoras.imprimir(result.impresora, result.impresion, true, archivo);            
        }catch(e){    
            if(Ext.isEmpty(e)){
                Ext.MessageBox.alert('Error al preparar la impresion', 'Nulo');
                return;
            }
            if(!Ext.isEmpty(e.message)){
                Ext.MessageBox.alert('Error al preparar la impresion', e.message);
            }else{
                Ext.MessageBox.alert('Error al preparar la impresion', e);
            }        
        }
    },

    descargarPostConsulta: function(result) {
        try{                  
            if(!result.success){
                throw result.msg;
            }

            if(!Ext.isEmpty(result.msg)){
                Ext.MessageBox.alert('Exito',result.msg);
            }        

            if(!Ext.isDefined(result.impresion) || Ext.isEmpty(result.impresion))
            throw 'El informe o documento no ha definido una impresion';       

            var url='clases/interfaces/sistema/impresion/InterfazAdministracionImpresoras.php?accion='+1001+'&idImpresion='+result.impresion+'&c='+Ext.Number.randomInt(0, 1500000000);    
            location.href=url;    
        }catch(e){    
            if(Ext.isEmpty(e)){
                Ext.MessageBox.alert('Error al preparar la impresion', 'Nulo');
                return;
            }
            if(!Ext.isEmpty(e.message)){
                Ext.MessageBox.alert('Error al preparar la impresion', e.message);
            }else{
                Ext.MessageBox.alert('Error al preparar la impresion', e);
            }        
        }
    }

});
